{"version":3,"sources":["redux/contacts/contacts-selector.js","components/ContactForm/ContactForm.js","components/Notification/Notification.js","components/ContactList/contactItem.jsx","components/Loader-spinner/LoaderSmall.jsx","components/ContactList/ContactList.js","components/Filter/Filter.styled.jsx","components/Filter/Filter.js","view/ContactsPage.js"],"names":["selectFilterValue","state","filter","selectItemsContacts","contactsSlice","items","selectIsLoadingItems","isLoadingContacts","selectVisibleContacts","createSelector","selectItems","normalizedFilter","toLowerCase","name","includes","ContactForm","dispatch","useDispatch","contacts","useSelector","useForm","register","handleSubmit","errors","formState","resetField","resetInputField","onSubmit","data","number","normalizedName","theFirstCondition","find","contact","theSecondCondition","toast","error","addNewItemThunk","autoComplete","htmlFor","type","id","required","maxLength","pattern","title","Notification","message","defaultProps","propType","PropTypes","string","isRequired","ContactItem","href","onClick","deleteItemThunk","LoaderSmall","color","height","width","timeout","ContactList","isLoadingItems","contactItems","length","map","FilterContainer","styled","div","FilterInput","input","Filter","value","onChange","target","changeFilter","trim","ContactsPage","useEffect","getItemsThunk","theme","autoClose"],"mappings":"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","file":"static/js/Contacts page.10fdc6e8.chunk.js","sourcesContent":["import { createSelector } from \"@reduxjs/toolkit\";\r\n\r\nexport const selectFilterValue = (state) => state.filter.filter;\r\nexport const selectItemsContacts = (state) => state.contactsSlice.items;\r\nexport const selectIsLoadingItems = (state) =>\r\n  state.contactsSlice.isLoadingContacts;\r\n\r\nexport const selectVisibleContacts = createSelector(\r\n  [selectItemsContacts, selectFilterValue],\r\n  (selectItems, filter) => {\r\n    const normalizedFilter = filter.toLowerCase();\r\n    return selectItems.filter(({ name }) =>\r\n      name.toLowerCase().includes(normalizedFilter)\r\n    );\r\n  }\r\n);\r\n","import React from \"react\";\r\nimport { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { selectItemsContacts } from \"../../redux/contacts/contacts-selector\";\r\nimport { addNewItemThunk } from \"../../redux/contacts/contacts-thunk\";\r\nimport { Wrapper, Input, Label, Button, LabelMessage } from \"../../App.styled\";\r\n\r\nfunction ContactForm() {\r\n  const dispatch = useDispatch();\r\n  const contacts = useSelector(selectItemsContacts);\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors },\r\n    resetField,\r\n  } = useForm();\r\n\r\n  const onSubmit = (data) => {\r\n    const { name, number } = data;\r\n    const normalizedName = name.toLowerCase();\r\n    const theFirstCondition = contacts.find(\r\n      (contact) => contact.name.toLowerCase() === normalizedName\r\n    );\r\n    const theSecondCondition = contacts.find(\r\n      (contact) => contact.number === number\r\n    );\r\n\r\n    if (theFirstCondition) {\r\n      return toast.error(`${name} is already in contacts list`);\r\n    } else if (theSecondCondition) {\r\n      return toast.error(`${number} is already in contacts list`);\r\n    } else {\r\n      dispatch(addNewItemThunk(data));\r\n    }\r\n    resetInputField();\r\n  };\r\n\r\n  const resetInputField = () => {\r\n    resetField(\"name\");\r\n    resetField(\"number\");\r\n  };\r\n\r\n  return (\r\n    <Wrapper>\r\n      <form onSubmit={handleSubmit(onSubmit)} autoComplete=\"off\">\r\n        <Label htmlFor=\"nameInput\">\r\n          Name:\r\n          {errors.name?.type === \"required\" && (\r\n            <LabelMessage> is required*</LabelMessage>\r\n          )}\r\n          <Input\r\n            type=\"text\"\r\n            id=\"nameInput\"\r\n            {...register(\"name\", {\r\n              required: true,\r\n              maxLength: 80,\r\n              pattern:\r\n                \"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\",\r\n              title:\r\n                \"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\",\r\n            })}\r\n          />\r\n        </Label>\r\n\r\n        <Label htmlFor=\"telInput\">\r\n          Number:\r\n          {errors.number?.type === \"required\" && (\r\n            <LabelMessage> is required *</LabelMessage>\r\n          )}\r\n          <Input\r\n            type=\"tel\"\r\n            id=\"telInput\"\r\n            {...register(\"number\", {\r\n              required: true,\r\n              maxLength: 12,\r\n              pattern:\r\n                \"/+?d{1,4}?[-.s]?(?d{1,3}?)?[-.s]?d{1,4}[-.s]?d{1,4}[-.s]?d{1,9}/i\",\r\n            })}\r\n          />\r\n        </Label>\r\n\r\n        <br />\r\n        <Button type=\"submit\">Add contact</Button>\r\n      </form>\r\n    </Wrapper>\r\n  );\r\n}\r\n\r\nexport default ContactForm;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { NotifyMessage } from \"../../App.styled\";\r\n\r\nexport default function Notification({ message }) {\r\n  return <NotifyMessage>{message}</NotifyMessage>;\r\n}\r\n\r\nNotification.defaultProps = {\r\n  message: \"No contacts \",\r\n};\r\n\r\nNotification.propType = {\r\n  message: PropTypes.string.isRequired,\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { MdCall, MdOutlineDeleteOutline } from \"react-icons/md\";\r\nimport { ItemName, ListItem, LinkToCall, ItemButton } from \"../../App.styled\";\r\nimport { deleteItemThunk } from \"../../redux/contacts/contacts-thunk\";\r\nimport { useDispatch } from \"react-redux\";\r\nexport default function ContactItem({ id, name, number }) {\r\n  const dispatch = useDispatch();\r\n\r\n  const deleteItem = () => {\r\n    dispatch(deleteItemThunk(id));\r\n  };\r\n\r\n  return (\r\n    <ListItem key={id}>\r\n      <ItemName>{name}</ItemName>\r\n      <LinkToCall href=\"tel:{number}\">\r\n        <MdCall />\r\n        {number}\r\n      </LinkToCall>\r\n\r\n      <div>\r\n        <ItemButton type=\"button\" onClick={() => deleteItem(id)}>\r\n          <MdOutlineDeleteOutline />\r\n        </ItemButton>\r\n      </div>\r\n    </ListItem>\r\n  );\r\n}\r\n\r\nContactItem.propType = {\r\n  id: PropTypes.string,\r\n  name: PropTypes.string,\r\n  number: PropTypes.string,\r\n};\r\n","import React from \"react\";\r\nimport Loader from \"react-loader-spinner\";\r\nimport { CenterContainerForLoader } from \"../../App.styled\";\r\n\r\nexport default function LoaderSmall() {\r\n  return (\r\n    <CenterContainerForLoader>\r\n      <Loader\r\n        type=\"Bars\"\r\n        color=\"red\"\r\n        height={50}\r\n        width={50}\r\n        timeout={3000} //3 secs\r\n      />\r\n    </CenterContainerForLoader>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Notification from \"../Notification/Notification\";\r\nimport ContactItem from \"./contactItem\";\r\nimport { useSelector } from \"react-redux\";\r\nimport {\r\n  selectVisibleContacts,\r\n  selectIsLoadingItems,\r\n} from \"../../redux/contacts/contacts-selector\";\r\nimport LoaderSmall from \"../Loader-spinner/LoaderSmall\";\r\nimport { ContactsList } from \"../../App.styled\";\r\n\r\nexport default function ContactList() {\r\n  const isLoadingItems = useSelector(selectIsLoadingItems);\r\n  const contactItems = useSelector(selectVisibleContacts);\r\n\r\n  return (\r\n    <>\r\n      {isLoadingItems && <LoaderSmall />}\r\n      {contactItems && contactItems.length === 0 && <Notification />}\r\n      {contactItems && (\r\n        <ContactsList>\r\n          {contactItems.map(({ id, name, number }) => (\r\n            <ContactItem key={id} id={id} name={name} number={number} />\r\n          ))}\r\n        </ContactsList>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","import styled from \"@emotion/styled\";\r\n// .filter_overlay {\r\n//   border-style: outset;\r\n// }\r\n// .filter_label {\r\n//   font-weight: 500;\r\n// }\r\n\r\n// .filter_input {\r\n//   width: calc(100% / 2);\r\n//   border: 2px solid #ccc;\r\n//   border-radius: 4px;\r\n//   font-size: 16px;\r\n//   margin-left: 20px;\r\n// }\r\n\r\nexport const FilterContainer = styled.div`\r\n  max-width: 400px;\r\n  padding: 10px 0;\r\n  display: flex;\r\n  justify-content: center;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  color: white;\r\n  border-radius: 15px 50px;\r\n  border-bottom-left-radius: 70px;\r\n  border-top-right-radius: 70px;\r\n  background: #191815d1;\r\n`;\r\n\r\nexport const FilterInput = styled.input`\r\n  max-width: 150px;\r\n  padding: 0 35px 0 35px;\r\n  background: #fff;\r\n  border-radius: 20px;\r\n  font-size: 18px;\r\n  font-weight: 700;\r\n  border: 1px solid #8f8fa1;\r\n  outline: none;\r\n  color: #8f8fa1;\r\n  line-height: 1.2;\r\n\r\n  &:focus {\r\n    box-shadow: 0px 0px 1px 1px red;\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport { changeFilter } from \"../../redux/contacts/filter-actions\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n  selectFilterValue,\r\n  selectItemsContacts,\r\n} from \"../../redux/contacts/contacts-selector\";\r\nimport { FilterContainer, FilterInput } from \"./Filter.styled\";\r\n\r\nexport default function Filter() {\r\n  const filter = useSelector(selectFilterValue);\r\n  const items = useSelector(selectItemsContacts);\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <>\r\n      {items && items.length > 2 && (\r\n        <FilterContainer>\r\n          <label>\r\n            Find contacts by name:\r\n            <FilterInput\r\n              type=\"text\"\r\n              value={filter}\r\n              onChange={({ target }) =>\r\n                dispatch(changeFilter(target.value.trim()))\r\n              }\r\n            />\r\n          </label>\r\n        </FilterContainer>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","import React, { useEffect } from \"react\";\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport ContactForm from \"../components/ContactForm/ContactForm\";\r\nimport ContactList from \"../components/ContactList/ContactList\";\r\nimport Filter from \"../components/Filter/Filter\";\r\n\r\nimport { Section } from \"../App.styled\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { getItemsThunk } from \"../redux/contacts/contacts-thunk\";\r\n\r\nfunction ContactsPage() {\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(getItemsThunk());\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <>\r\n      <ContactForm />\r\n      <Section>\r\n        <Filter />\r\n        <ContactList />\r\n      </Section>\r\n\r\n      <ToastContainer theme=\"dark\" autoClose={3000} />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ContactsPage;\r\n"],"sourceRoot":""}