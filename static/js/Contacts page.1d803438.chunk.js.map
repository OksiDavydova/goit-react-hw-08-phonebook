{"version":3,"sources":["components/Modal/Modal.module.css","components/ContactForm/ContactForm.js","components/Notification/Notification.js","components/ContactList/contactItem.jsx","redux/contacts-selector.js","components/Loader-spinner/Loader-spinner.jsx","components/ContactList/ContactList.js","components/Filter/Filter.styled.jsx","components/Filter/Filter.js","components/Modal/Modal.jsx","view/ContactsPage.js"],"names":["module","exports","ContactForm","useCreateItemMutation","createItem","isLoading","contacts","useGetItemsQuery","data","useForm","register","handleSubmit","errors","formState","resetField","resetInputField","onSubmit","name","number","normalizedName","toLowerCase","theFirstCondition","find","contact","theSecondCondition","toast","error","autoComplete","htmlFor","type","id","required","maxLength","pattern","title","Notification","message","defaultProps","propType","PropTypes","string","isRequired","ContactItem","toggleModal","useDeleteItemMutation","deleteItem","isDeleting","href","onClick","filterValue","state","filter","LoaderSpinner","color","height","width","timeout","ContactList","items","isError","contactItems","filterString","normFilter","includes","getVisibleItems","useSelector","length","map","FilterContainer","styled","div","FilterInput","input","Filter","dispatch","useDispatch","value","onChange","target","changeFilter","trim","modalRoot","document","querySelector","Modal","useEffect","window","addEventListener","handleKeyDown","removeEventListener","e","code","createPortal","className","s","Overlay","currentTarget","ContactsPage","useState","showModal","setShowModal","theme","autoClose"],"mappings":"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","file":"static/js/Contacts page.1d803438.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Overlay\":\"Modal_Overlay__2_HQ8\",\"Modal\":\"Modal_Modal__3pEoi\"};","import React from \"react\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useCreateItemMutation, useGetItemsQuery } from \"../../redux/itemsRTK\";\r\nimport { Wrapper, Input, Label, Button, LabelMessage } from \"../../App.styled\";\r\nfunction ContactForm() {\r\n  const [createItem, { isLoading }] = useCreateItemMutation();\r\n  const { data: contacts } = useGetItemsQuery();\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors },\r\n    resetField,\r\n  } = useForm();\r\n\r\n  const onSubmit = (data) => {\r\n    const { name, number } = data;\r\n    const normalizedName = name.toLowerCase();\r\n    const theFirstCondition = contacts.find(\r\n      (contact) => contact.name.toLowerCase() === normalizedName\r\n    );\r\n    const theSecondCondition = contacts.find(\r\n      (contact) => contact.number === number\r\n    );\r\n\r\n    if (theFirstCondition) {\r\n      return toast.error(`${name} is already in contacts list`);\r\n    } else if (theSecondCondition) {\r\n      return toast.error(`${number} is already in contacts list`);\r\n    } else {\r\n      createItem(data);\r\n    }\r\n    resetInputField();\r\n  };\r\n\r\n  const resetInputField = () => {\r\n    resetField(\"name\");\r\n    resetField(\"number\");\r\n  };\r\n\r\n  return (\r\n    <Wrapper>\r\n      <form onSubmit={handleSubmit(onSubmit)} autoComplete=\"off\">\r\n        <Label htmlFor=\"nameInput\">\r\n          Name:\r\n          {errors.name?.type === \"required\" && (\r\n            <LabelMessage> is required*</LabelMessage>\r\n          )}\r\n          <Input\r\n            type=\"text\"\r\n            id=\"nameInput\"\r\n            {...register(\"name\", {\r\n              required: true,\r\n              maxLength: 80,\r\n              pattern:\r\n                \"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\",\r\n              title:\r\n                \"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\",\r\n            })}\r\n          />\r\n        </Label>\r\n\r\n        <Label htmlFor=\"telInput\">\r\n          Number:\r\n          {errors.number?.type === \"required\" && (\r\n            <LabelMessage> is required *</LabelMessage>\r\n          )}\r\n          <Input\r\n            type=\"tel\"\r\n            id=\"telInput\"\r\n            {...register(\"number\", {\r\n              required: true,\r\n              maxLength: 12,\r\n              pattern:\r\n                \"/+?d{1,4}?[-.s]?(?d{1,3}?)?[-.s]?d{1,4}[-.s]?d{1,4}[-.s]?d{1,9}/i\",\r\n            })}\r\n          />\r\n        </Label>\r\n\r\n        <br />\r\n        <Button type=\"submit\">{isLoading ? \"Adding...\" : \"Add contact\"}</Button>\r\n      </form>\r\n    </Wrapper>\r\n  );\r\n}\r\n\r\nexport default ContactForm;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { NotifyMessage } from \"../../App.styled\";\r\n\r\nexport default function Notification({ message }) {\r\n  return <NotifyMessage>{message}</NotifyMessage>;\r\n}\r\n\r\nNotification.defaultProps = {\r\n  message: \"No contacts \",\r\n};\r\n\r\nNotification.propType = {\r\n  message: PropTypes.string.isRequired,\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport {\r\n  MdCall,\r\n  MdOutlineDeleteOutline,\r\n  MdModeEditOutline,\r\n} from \"react-icons/md\";\r\nimport { useDeleteItemMutation } from \"../../redux/itemsRTK\";\r\nimport { ItemName, ListItem, LinkToCall, ItemButton } from \"../../App.styled\";\r\nexport default function ContactItem({ id, name, number, toggleModal }) {\r\n  const [deleteItem, { isLoading: isDeleting }] = useDeleteItemMutation();\r\n\r\n  return (\r\n    <ListItem key={id}>\r\n      <ItemName>{name}</ItemName>\r\n      <LinkToCall href=\"tel:{number}\">\r\n        <MdCall />\r\n        {number}\r\n      </LinkToCall>\r\n\r\n      <div>\r\n        <ItemButton type=\"button\" onClick={() => deleteItem(id)}>\r\n          {isDeleting ? \"...\" : <MdOutlineDeleteOutline />}\r\n        </ItemButton>\r\n        <ItemButton type=\"button\" onClick={() => toggleModal()}>\r\n          <MdModeEditOutline />\r\n        </ItemButton>\r\n      </div>\r\n    </ListItem>\r\n  );\r\n}\r\n\r\nContactItem.propType = {\r\n  id: PropTypes.string,\r\n  name: PropTypes.string,\r\n  number: PropTypes.string,\r\n};\r\n","export const filterValue = (state) => state.contacts.filter;\r\n\r\n//for ContactList\r\nexport const getVisibleItems = (data, filterString) => {\r\n  let normFilter = filterString.toLowerCase();\r\n  if (data) {\r\n    return data.filter(({ name }) => name.toLowerCase().includes(normFilter));\r\n  }\r\n  return data;\r\n};\r\n","import React from \"react\";\r\nimport Loader from \"react-loader-spinner\";\r\n\r\nexport default function LoaderSpinner() {\r\n  return (\r\n    <>\r\n      <Loader\r\n        type=\"Bars\"\r\n        color=\"#00BFFF\"\r\n        height={50}\r\n        width={50}\r\n        timeout={3000} //3 secs\r\n      />\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Notification from \"../Notification/Notification\";\r\nimport ContactItem from \"./contactItem\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { filterValue, getVisibleItems } from \"../../redux/contacts-selector\";\r\nimport { useGetItemsQuery } from \"../../redux/itemsRTK\";\r\nimport LoaderSpinner from \"../Loader-spinner/Loader-spinner\";\r\nimport { ContactsList } from \"../../App.styled\";\r\n\r\nexport default function ContactList({ toggleModal }) {\r\n  const { data: items, isError, isLoading } = useGetItemsQuery();\r\n  const filter = useSelector(filterValue);\r\n  const contactItems = getVisibleItems(items, filter);\r\n\r\n  return (\r\n    <>\r\n      {isLoading && <LoaderSpinner />}\r\n      {isError && <p>...:(...</p>}\r\n      {contactItems && contactItems.length === 0 && <Notification />}\r\n\r\n      {contactItems && (\r\n        <ContactsList>\r\n          {contactItems.map(({ id, name, number }) => (\r\n            <ContactItem\r\n              key={id}\r\n              id={id}\r\n              name={name}\r\n              number={number}\r\n              toggleModal={toggleModal}\r\n            />\r\n          ))}\r\n        </ContactsList>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","import styled from \"@emotion/styled\";\r\n// .filter_overlay {\r\n//   border-style: outset;\r\n// }\r\n// .filter_label {\r\n//   font-weight: 500;\r\n// }\r\n\r\n// .filter_input {\r\n//   width: calc(100% / 2);\r\n//   border: 2px solid #ccc;\r\n//   border-radius: 4px;\r\n//   font-size: 16px;\r\n//   margin-left: 20px;\r\n// }\r\n\r\nexport const FilterContainer = styled.div`\r\n  max-width: 400px;\r\n  padding: 10px 0;\r\n  display: flex;\r\n  justify-content: center;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  color: white;\r\n  border-radius: 15px 50px;\r\n  border-bottom-left-radius: 70px;\r\n  border-top-right-radius: 70px;\r\n  background: #191815d1;\r\n`;\r\n\r\nexport const FilterInput = styled.input`\r\n  max-width: 150px;\r\n  padding: 0 35px 0 35px;\r\n  background: #fff;\r\n  border-radius: 20px;\r\n  font-size: 18px;\r\n  font-weight: 700;\r\n  border: 1px solid #8f8fa1;\r\n  outline: none;\r\n  color: #8f8fa1;\r\n  line-height: 1.2;\r\n\r\n  &:focus {\r\n    box-shadow: 0px 0px 1px 1px red;\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport { changeFilter } from \"../../redux/actions-contacts\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { filterValue } from \"../../redux/contacts-selector\";\r\nimport { FilterContainer, FilterInput } from \"./Filter.styled\";\r\nimport { useGetItemsQuery } from \"../../redux/itemsRTK\";\r\n\r\nexport default function Filter() {\r\n  const filter = useSelector(filterValue);\r\n  const { data: items } = useGetItemsQuery();\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <>\r\n      {items && items.length > 2 && (\r\n        <FilterContainer>\r\n          <label>\r\n            Find contacts by name:\r\n            <FilterInput\r\n              type=\"text\"\r\n              value={filter}\r\n              onChange={({ target }) =>\r\n                dispatch(changeFilter(target.value.trim()))\r\n              }\r\n            />\r\n          </label>\r\n        </FilterContainer>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","import { useEffect } from \"react\";\r\n// import PropTypes from \"prop-types\";\r\nimport { createPortal } from \"react-dom\";\r\nimport s from \"./Modal.module.css\";\r\n// import { ReactComponent as Close } from \"../../Icons/Close.svg\";\r\n\r\nconst modalRoot = document.querySelector(\"#modal-root\");\r\n\r\nexport function Modal({ toggleModal }) {\r\n  useEffect(() => {\r\n    window.addEventListener(\"keydown\", handleKeyDown);\r\n    return () => {\r\n      window.removeEventListener(\"keydown\", handleKeyDown);\r\n    };\r\n  });\r\n\r\n  // Escape keydown///\r\n  const handleKeyDown = (e) => {\r\n    if (e.code === \"Escape\") {\r\n      toggleModal();\r\n    }\r\n  };\r\n\r\n  const handleClose = (e) => {\r\n    if (e.currentTarget === e.target) {\r\n      toggleModal();\r\n    }\r\n  };\r\n\r\n  // const handleCloseButton = () => {\r\n  //   toggleModal();\r\n  // };\r\n\r\n  return createPortal(\r\n    <div className={s.Overlay} onClick={handleClose}>\r\n      <div className={s.Modal}>\r\n        <form>\r\n          <input type=\"text\" />\r\n          <input type=\"tel\" />\r\n          <button type=\"submit\">confirm</button>\r\n        </form>\r\n      </div>\r\n    </div>,\r\n    modalRoot\r\n  );\r\n}\r\n\r\n// Modal.propTypes = {\r\n//   children: PropTypes.node,\r\n// };\r\n","import React, { useState } from \"react\";\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport ContactForm from \"../components/ContactForm/ContactForm\";\r\nimport ContactList from \"../components/ContactList/ContactList\";\r\nimport Filter from \"../components/Filter/Filter\";\r\nimport { Modal } from \"../components/Modal/Modal\";\r\nimport { Section } from \"../App.styled\";\r\n\r\nfunction ContactsPage() {\r\n  const [showModal, setShowModal] = useState(false);\r\n\r\n  const toggleModal = () => {\r\n    setShowModal(!showModal);\r\n  };\r\n  return (\r\n    <>\r\n      <ContactForm />\r\n      <Section>\r\n        <Filter />\r\n        <ContactList toggleModal={toggleModal} />\r\n      </Section>\r\n      {showModal && <Modal toggleModal={toggleModal} />}\r\n\r\n      <ToastContainer theme=\"dark\" autoClose={3000} />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ContactsPage;\r\n"],"sourceRoot":""}