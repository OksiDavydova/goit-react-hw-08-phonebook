{"version":3,"sources":["view/RegisterPage.js"],"names":["RegisterPage","isAuth","useSelector","getIsAuth","dispatch","useDispatch","isError","getIsError","useForm","register","handleSubmit","errors","formState","resetField","resetInputField","to","replace","onSubmit","data","registerThunk","htmlFor","name","type","id","required","maxLength","pattern","number","password","minLength"],"mappings":"+PA+GeA,UA/Ff,WAAyB,IAAD,QAChBC,EAASC,YAAYC,KACrBC,EAAWC,cACXC,EAAUJ,YAAYK,KAE5B,EAKIC,cAJFC,EADF,EACEA,SACAC,EAFF,EAEEA,aACaC,EAHf,EAGEC,UAAaD,OACbE,EAJF,EAIEA,WAQIC,EAAkB,WACtBD,EAAW,QACXA,EAAW,YACXA,EAAW,UAGb,OACE,mCACGZ,EACC,cAAC,IAAD,CAAUc,GAAG,IAAIC,SAAS,IAE1B,eAAC,IAAD,WACE,cAAC,IAAD,2BACCV,GAAW,cAAC,IAAD,sCACZ,uBAAMW,SAAUP,GAnBC,SAACQ,GACxBd,EAASe,YAAcD,IACvBJ,OAiBM,UACE,eAAC,IAAD,CAAOM,QAAQ,YAAf,kBAEyB,cAAtB,UAAAT,EAAOU,YAAP,eAAaC,OACZ,cAAC,IAAD,4BAEF,cAAC,IAAD,aACEA,KAAK,OACLC,GAAG,aACCd,EAAS,OAAQ,CACnBe,UAAU,EACVC,UAAW,GACXC,QACE,gIAKR,eAAC,IAAD,CAAON,QAAQ,aAAf,2BAE2B,cAAxB,UAAAT,EAAOgB,cAAP,eAAeL,OACd,cAAC,IAAD,6BAEF,cAAC,IAAD,aACEA,KAAK,OAELC,GAAG,cACCd,EAAS,QAAS,CACpBe,UAAU,EACVE,QAAS,oBAKf,eAAC,IAAD,CAAON,QAAQ,WAAf,sBAE6B,eAA1B,UAAAT,EAAOiB,gBAAP,eAAiBN,OAChB,cAAC,IAAD,qCAEyB,cAA1B,UAAAX,EAAOiB,gBAAP,eAAiBN,OAChB,cAAC,IAAD,6BAEF,cAAC,IAAD,aACEA,KAAK,WAELC,GAAG,YACCd,EAAS,WAAY,CACvBe,UAAU,EACVK,UAAW,EACXH,QAAS,oBAKf,uBACA,cAAC,IAAD,CAAQJ,KAAK,SAAb,uBAEDhB,GAAW,eAAC,IAAD,uBAAwBA","file":"static/js/Register page.25291834.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { registerThunk } from \"../redux/auth/auth-thunks\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  Wrapper,\r\n  Input,\r\n  Label,\r\n  Button,\r\n  LabelMessage,\r\n  Title,\r\n} from \"../App.styled\";\r\nimport { getIsError, getIsAuth } from \"../redux/auth/auth-selector\";\r\nimport { Navigate } from \"react-router\";\r\n\r\nfunction RegisterPage() {\r\n  const isAuth = useSelector(getIsAuth);\r\n  const dispatch = useDispatch();\r\n  const isError = useSelector(getIsError);\r\n\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors },\r\n    resetField,\r\n  } = useForm();\r\n\r\n  const onRegisterSubmit = (data) => {\r\n    dispatch(registerThunk(data));\r\n    resetInputField();\r\n  };\r\n\r\n  const resetInputField = () => {\r\n    resetField(\"name\");\r\n    resetField(\"password\");\r\n    resetField(\"email\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {isAuth ? (\r\n        <Navigate to=\"/\" replace={true} />\r\n      ) : (\r\n        <Wrapper>\r\n          <Title>Registration</Title>\r\n          {isError && <LabelMessage>Error, please try again</LabelMessage>}\r\n          <form onSubmit={handleSubmit(onRegisterSubmit)}>\r\n            <Label htmlFor=\"nameInput\">\r\n              name:\r\n              {errors.name?.type === \"required\" && (\r\n                <LabelMessage> is required*</LabelMessage>\r\n              )}\r\n              <Input\r\n                type=\"text\"\r\n                id=\"nameInput\"\r\n                {...register(\"name\", {\r\n                  required: true,\r\n                  maxLength: 80,\r\n                  pattern:\r\n                    \"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\",\r\n                })}\r\n              />\r\n            </Label>\r\n\r\n            <Label htmlFor=\"emailInput\">\r\n              email address:\r\n              {errors.number?.type === \"required\" && (\r\n                <LabelMessage> is required *</LabelMessage>\r\n              )}\r\n              <Input\r\n                type=\"text\"\r\n                // className={s.input}\r\n                id=\"emailInput\"\r\n                {...register(\"email\", {\r\n                  required: true,\r\n                  pattern: \"/^S+@S+$/i\",\r\n                })}\r\n              />\r\n            </Label>\r\n\r\n            <Label htmlFor=\"password\">\r\n              password:\r\n              {errors.password?.type === \"minLength\" && (\r\n                <LabelMessage> min length 7 symbol *</LabelMessage>\r\n              )}\r\n              {errors.password?.type === \"required\" && (\r\n                <LabelMessage> is required *</LabelMessage>\r\n              )}\r\n              <Input\r\n                type=\"password\"\r\n                // className={s.input}\r\n                id=\"password\"\r\n                {...register(\"password\", {\r\n                  required: true,\r\n                  minLength: 7,\r\n                  pattern: \"/^S+@S+$/i\",\r\n                })}\r\n              />\r\n            </Label>\r\n\r\n            <br />\r\n            <Button type=\"submit\">Submit</Button>\r\n          </form>\r\n          {isError && <LabelMessage>Warring, {isError}</LabelMessage>}\r\n        </Wrapper>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default RegisterPage;\r\n"],"sourceRoot":""}