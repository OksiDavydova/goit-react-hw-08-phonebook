{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","../../src/utils/isCheckBoxInput.ts","../../src/utils/isDateObject.ts","../../src/utils/isNullOrUndefined.ts","../../src/utils/isObject.ts","../../src/logic/isNameInFieldArray.ts","../../src/logic/getNodeParentName.ts","../../src/utils/compact.ts","../../src/utils/isUndefined.ts","../../src/utils/get.ts","../../src/constants.ts","../../src/utils/omit.ts","../../src/logic/getProxyFormState.ts","../../src/useFormContext.tsx","../../src/utils/isEmptyObject.ts","../../src/logic/shouldRenderFormState.ts","../../src/utils/convertToArrayPayload.ts","../../src/useSubscribe.ts","../../src/utils/isString.ts","../../src/logic/generateWatchOutput.ts","../../src/logic/appendErrors.ts","../../src/utils/isKey.ts","../../src/utils/stringToPath.ts","../../src/utils/set.ts","../../src/logic/focusFieldBy.ts","../../src/logic/isWatched.ts","../../src/utils/remove.ts","../../src/utils/isFunction.ts","../../src/utils/cloneObject.ts","../../src/utils/createSubject.ts","../../src/utils/isPrimitive.ts","../../src/utils/deepEqual.ts","../../src/utils/getValidationModes.ts","../../src/utils/isBoolean.ts","../../src/utils/isFileInput.ts","../../src/utils/isHTMLElement.ts","../../src/utils/isMultipleSelect.ts","../../src/utils/isRadioInput.ts","../../src/utils/isRadioOrCheckbox.ts","../../src/utils/isWeb.ts","../../src/utils/live.ts","../../src/utils/unset.ts","../../src/logic/getCheckboxValue.ts","../../src/logic/getFieldValueAs.ts","../../src/logic/getRadioValue.ts","../../src/logic/getFieldValue.ts","../../src/logic/getResolverOptions.ts","../../src/logic/hasValidation.ts","../../src/logic/schemaErrorLookup.ts","../../src/utils/deepMerge.ts","../../src/logic/setFieldArrayDirtyFields.ts","../../src/logic/skipValidation.ts","../../src/logic/unsetEmptyArray.ts","../../src/utils/isMessage.ts","../../src/utils/isRegex.ts","../../src/logic/getValidateError.ts","../../src/logic/getValueAndMessage.ts","../../src/logic/validateField.ts","../../src/logic/createFormControl.ts","../../src/useForm.ts"],"names":["_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","Object","from","unsupportedIterableToArray","TypeError","element","type","data","Date","value","isObjectType","isNullOrUndefined","isDateObject","names","name","some","current","substring","search","getNodeParentName","filter","Boolean","val","undefined","obj","path","defaultValue","isObject","result","compact","split","reduce","key","isUndefined","EVENTS","VALIDATION_MODE","INPUT_VALIDATION_RULES","source","copy","formState","_proxyFormState","localProxyFormState","isRoot","createGetter","prop","defineProperty","get","keys","length","formStateData","omit","isEmptyObject","find","useSubscribe","props","_props","subscription","disabled","subject","subscribe","next","callback","unsubscribe","tearDown","generateWatchOutput","_names","formValues","isGlobal","isString","watch","add","map","fieldName","watchAll","validateAllFieldCriteria","errors","message","types","test","input","replace","set","object","index","tempPath","isKey","stringToPath","lastIndex","newValue","objValue","isNaN","focusFieldBy","fields","fieldsNames","field","_f","ref","focus","refs","isBlurEvent","has","watchName","startsWith","slice","cloneObject","Set","isFunction","createSubject","_observers","observers","observer","push","o","deepEqual","object1","object2","isPrimitive","getTime","keys1","keys2","val1","includes","val2","mode","isOnSubmit","isOnBlur","isOnChange","isOnAll","isOnTouch","HTMLElement","isRadioInput","isCheckBoxInput","window","document","isHTMLElement","contains","unset","previousObjRef","updatePath","childObject","baseGet","k","objectRef","currentPaths","currentPathsLength","item","isBoolean","defaultResult","isValid","validResult","options","values","option","checked","attributes","valueAsNumber","valueAsDate","setValueAs","NaN","defaultReturn","previous","getFieldValue","every","isFileInput","files","getRadioValue","isMultipleSelect","selectedOptions","isCheckBox","getCheckboxValue","getFieldValueAs","_fields","criteriaMode","shouldUseNativeValidation","mount","required","min","max","maxLength","minLength","pattern","validate","schemaErrorLookup","error","join","foundError","pop","deepMerge","target","targetValue","sourceValue","setDirtyFields","defaultValues","dirtyFields","parentNode","parentName","isTouched","isSubmitted","reValidateMode","RegExp","getValidateError","validationData","isRegex","inputValue","a","inputRef","setCustomValidty","reportValidity","setCustomValidity","isRadio","isRadioOrCheckbox","isEmpty","appendErrorsCurry","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getValueAndMessage","maxOutput","minOutput","valueDate","exceedMin","valueNumber","parseFloat","maxLengthOutput","minLengthOutput","patternValue","match","validateError","validationResult","defaultOptions","shouldFocusError","isWindowUndefined","createFormControl","delayErrorCallback","_options","_formState","isDirty","isValidating","submitCount","touchedFields","isSubmitting","isSubmitSuccessful","_defaultValues","_formValues","shouldUnregister","_stateFlags","action","unMount","array","timer","validateFields","_subjects","state","validationModeBeforeSubmit","getValidationModes","validationModeAfterSubmit","shouldDisplayAllAssociatedErrors","debounce","wait","args","clearTimeout","setTimeout","_updateValid","shouldSkipRender","resolver","_executeSchema","executeBuildInValidation","_updateFieldArray","method","shouldSetValues","shouldSetFields","fieldValues","argA","argB","unsetEmptyArray","updateFieldArrayDirty","_getDirty","updateErrors","updateValidAndValue","shouldSkipSetValueAs","defaultChecked","setFieldValue","updateTouchAndDirty","fieldValue","isCurrentTouched","shouldRender","isFieldDirty","output","isPreviousFieldTouched","isPreviousFormDirty","isPreviousFieldDirty","isCurrentFieldPristine","setFieldArrayDirtyFields","shouldRenderByError","fieldState","previousFieldError","shouldUpdateValid","delayError","updatedFormState","context","executeSchemaAndUpdateState","shouldOnlyCheckValid","valid","fieldReference","validateField","fieldError","_removeUnmounted","live","unregister","getValues","_getWatch","_getFieldArray","isWeb","forEach","selectRef","selected","checkboxRef","radioRef","shouldDirty","shouldTouch","shouldValidate","trigger","setValues","fieldKey","setValue","isFieldArray","handleChange","event","shouldSkipValidation","hasValidation","deps","skipValidation","watched","onBlur","onChange","previousErrorLookupResult","errorLookupResult","fieldNames","convertToArrayPayload","Promise","all","shouldFocus","clearErrors","inputName","setError","info","delete","keepValue","keepError","keepDirty","keepTouched","keepDefaultValue","keepIsValid","register","fieldRef","querySelectorAll","isRadioOrCheckboxFunction","handleSubmit","onValid","onInvalid","e","preventDefault","persist","hasNoPromiseError","resetField","reset","keepStateOptions","updatedValues","cloneUpdatedValues","keepDefaultValues","keepValues","closest","keepSubmitCount","keepIsSubmitted","entries","keepErrors","setFocus","control","useForm","_formControl","updateFormState","shouldRenderFormState","getProxyFormState"],"mappings":"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","file":"static/js/0.6460efe1.chunk.js","sourcesContent":["import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","export default (data: unknown) => data instanceof Date;\n","export default (value: unknown): value is null | undefined => value == null;\n","import isDateObject from './isDateObject';\nimport isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !isDateObject(value);\n","import { InternalFieldName } from '../types';\n\nimport getNodeParentName from './getNodeParentName';\n\nexport default (names: Set<InternalFieldName>, name: InternalFieldName) =>\n  [...names].some((current) => getNodeParentName(name) === current);\n","export default (name: string) => name.substring(0, name.search(/.\\d/)) || name;\n","export default (value: any[]) => value.filter(Boolean);\n","export default (val: unknown): val is undefined => val === undefined;\n","import compact from './compact';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\n\nexport default <T>(obj: T, path: string, defaultValue?: unknown) => {\n  if (isObject(obj) && path) {\n    const result = compact(path.split(/[,[\\].]+?/)).reduce(\n      (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n      obj,\n    );\n\n    return isUndefined(result) || result === obj\n      ? isUndefined(obj[path as keyof T])\n        ? defaultValue\n        : obj[path as keyof T]\n      : result;\n  }\n\n  return undefined;\n};\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","export default <Key extends string, T extends Record<Key, any>>(\n  source: T,\n  key: Key,\n): Omit<T, Key> => {\n  const copy = { ...source };\n  delete copy[key];\n\n  return copy;\n};\n","import { VALIDATION_MODE } from '../constants';\nimport { FormState, FormStateProxy, ReadFormState } from '../types';\n\nexport default <TFieldValues>(\n  formState: FormState<TFieldValues>,\n  _proxyFormState: ReadFormState,\n  localProxyFormState?: ReadFormState,\n  isRoot = true,\n) => {\n  function createGetter(prop: keyof FormStateProxy) {\n    return () => {\n      if (prop in formState) {\n        if (_proxyFormState[prop] !== VALIDATION_MODE.all) {\n          _proxyFormState[prop] = !isRoot || VALIDATION_MODE.all;\n        }\n        localProxyFormState && (localProxyFormState[prop] = true);\n        return formState[prop];\n      }\n      return undefined;\n    };\n  }\n\n  const result = {} as any as typeof formState;\n  for (const key in formState) {\n    Object.defineProperty(result, key, {\n      get: createGetter(key as keyof FormStateProxy),\n    });\n  }\n\n  return result;\n};\n","import * as React from 'react';\n\nimport omit from './utils/omit';\nimport { FieldValues, FormProviderProps, UseFormReturn } from './types';\n\nconst HookFormContext = React.createContext<UseFormReturn | null>(null);\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues,\n>(): UseFormReturn<TFieldValues> =>\n  React.useContext(HookFormContext) as unknown as UseFormReturn<TFieldValues>;\n\nexport const FormProvider = <\n  TFieldValues extends FieldValues,\n  TContext extends object = object,\n>(\n  props: FormProviderProps<TFieldValues, TContext>,\n) => (\n  <HookFormContext.Provider\n    value={omit(props, 'children') as unknown as UseFormReturn}\n  >\n    {props.children}\n  </HookFormContext.Provider>\n);\n","import { EmptyObject } from '../types';\n\nimport isObject from './isObject';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","import { VALIDATION_MODE } from '../constants';\nimport { ReadFormState } from '../types';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport omit from '../utils/omit';\n\nexport default <T extends Record<string, any>, K extends ReadFormState>(\n  formStateData: T,\n  _proxyFormState: K,\n  isRoot?: boolean,\n) => {\n  const formState = omit(formStateData, 'name');\n\n  return (\n    isEmptyObject(formState) ||\n    Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\n    Object.keys(formState).find(\n      (key) =>\n        _proxyFormState[key as keyof ReadFormState] ===\n        (!isRoot || VALIDATION_MODE.all),\n    )\n  );\n};\n","export default <T>(value: T) => (Array.isArray(value) ? value : [value]);\n","import * as React from 'react';\n\nimport { Subject, Subscription } from './utils/createSubject';\n\ntype Props<T> = {\n  disabled?: boolean;\n  subject: Subject<T>;\n  callback: (value: T) => void;\n};\n\nexport function useSubscribe<T>(props: Props<T>) {\n  const _props = React.useRef(props);\n  _props.current = props;\n\n  React.useEffect(() => {\n    const tearDown = (subscription: Subscription | false) => {\n      if (subscription) {\n        subscription.unsubscribe();\n      }\n    };\n\n    const subscription =\n      !props.disabled &&\n      _props.current.subject.subscribe({\n        next: _props.current.callback,\n      });\n\n    return () => tearDown(subscription);\n  }, [props.disabled]);\n}\n","export default (value: unknown): value is string => typeof value === 'string';\n","import { FieldValues, InternalFieldName, Names } from '../types';\nimport get from '../utils/get';\nimport isString from '../utils/isString';\n\nexport function generateWatchOutput(\n  names: string | string[] | undefined,\n  _names: Names,\n  formValues?: FieldValues,\n  isGlobal?: boolean,\n) {\n  const isArray = Array.isArray(names);\n  if (isString(names)) {\n    isGlobal && _names.watch.add(names as InternalFieldName);\n    return get(formValues, names as InternalFieldName);\n  }\n\n  if (isArray) {\n    return names.map(\n      (fieldName) => (\n        isGlobal && _names.watch.add(fieldName as InternalFieldName),\n        get(formValues, fieldName as InternalFieldName)\n      ),\n    );\n  }\n\n  isGlobal && (_names.watchAll = true);\n  return formValues;\n}\n","import {\n  InternalFieldErrors,\n  InternalFieldName,\n  ValidateResult,\n} from '../types';\n\nexport default (\n  name: InternalFieldName,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","export default (value: string) => /^\\w*$/.test(value);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n","import { FieldValues } from '../types';\n\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport stringToPath from './stringToPath';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import { FieldRefs, InternalFieldName } from '../types';\nimport { get } from '../utils';\nimport isObject from '../utils/isObject';\nimport isUndefined from '../utils/isUndefined';\nimport omit from '../utils/omit';\n\nconst focusFieldBy = (\n  fields: FieldRefs,\n  callback: (name: string) => boolean,\n  fieldsNames?: Set<InternalFieldName> | InternalFieldName[],\n) => {\n  for (const key of fieldsNames || Object.keys(fields)) {\n    const field = get(fields, key);\n\n    if (field) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n\n      if (_f && callback(_f.name)) {\n        if (_f.ref.focus && isUndefined(_f.ref.focus())) {\n          break;\n        } else if (_f.refs) {\n          _f.refs[0].focus();\n          break;\n        }\n      } else if (isObject(current)) {\n        focusFieldBy(current, callback);\n      }\n    }\n  }\n};\n\nexport default focusFieldBy;\n","import { InternalFieldName, Names } from '../types';\n\nexport default (\n  name: InternalFieldName,\n  _names: Names,\n  isBlurEvent?: boolean,\n) =>\n  !isBlurEvent &&\n  (_names.watchAll ||\n    _names.watch.has(name) ||\n    [..._names.watch].some(\n      (watchName) =>\n        name.startsWith(watchName) &&\n        /^\\.\\w+/.test(name.slice(watchName.length)),\n    ));\n","import compact from './compact';\nimport convertToArrayPayload from './convertToArrayPayload';\nimport isUndefined from './isUndefined';\n\nfunction removeAtIndexes<T>(data: T[], indexes: number[]): T[] {\n  let i = 0;\n  const temp = [...data];\n\n  for (const index of indexes) {\n    temp.splice(index - i, 1);\n    i++;\n  }\n\n  return compact(temp).length ? temp : [];\n}\n\nexport default <T>(data: T[], index?: number | number[]): T[] =>\n  isUndefined(index)\n    ? []\n    : removeAtIndexes(\n        data,\n        (convertToArrayPayload(index) as number[]).sort((a, b) => a - b),\n      );\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","import isFunction from './isFunction';\nimport isObject from './isObject';\n\nexport default function cloneObject<T>(data: T): T {\n  let copy: any;\n  const isArray = Array.isArray(data);\n\n  if (data instanceof Date) {\n    copy = new Date(data);\n  } else if (data instanceof Set) {\n    copy = new Set(data);\n  } else if (isArray || isObject(data)) {\n    copy = isArray ? [] : {};\n    for (const key in data) {\n      if (isFunction(data[key])) {\n        copy = data;\n        break;\n      }\n      copy[key] = cloneObject(data[key]);\n    }\n  } else {\n    return data;\n  }\n\n  return copy;\n}\n","import { Noop } from '../types';\n\nexport type Observer<T> = {\n  next: (value: T) => void;\n};\n\nexport type Subscription = {\n  unsubscribe: Noop;\n};\n\nexport type Subject<T> = {\n  readonly observers: Observer<T>[];\n  subscribe: (value: Observer<T>) => Subscription;\n  unsubscribe: Noop;\n} & Observer<T>;\n\nexport default function createSubject<T>(): Subject<T> {\n  let _observers: Observer<T>[] = [];\n\n  const next = (value: T) => {\n    for (const observer of _observers) {\n      observer.next(value);\n    }\n  };\n\n  const subscribe = (observer: Observer<T>): Subscription => {\n    _observers.push(observer);\n    return {\n      unsubscribe: () => {\n        _observers = _observers.filter((o) => o !== observer);\n      },\n    };\n  };\n\n  const unsubscribe = () => {\n    _observers = [];\n  };\n\n  return {\n    get observers() {\n      return _observers;\n    },\n    next,\n    subscribe,\n    unsubscribe,\n  };\n}\n","import { Primitive } from '../types';\n\nimport isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isObject from '../utils/isObject';\n\nimport isDateObject from './isDateObject';\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(object1: any, object2: any) {\n  if (isPrimitive(object1) || isPrimitive(object2)) {\n    return object1 === object2;\n  }\n\n  if (isDateObject(object1) && isDateObject(object2)) {\n    return object1.getTime() === object2.getTime();\n  }\n\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (const key of keys1) {\n    const val1 = object1[key];\n\n    if (!keys2.includes(key)) {\n      return false;\n    }\n\n    if (key !== 'ref') {\n      const val2 = object2[key];\n\n      if (\n        (isDateObject(val1) && isDateObject(val2)) ||\n        (isObject(val1) && isObject(val2)) ||\n        (Array.isArray(val1) && Array.isArray(val2))\n          ? !deepEqual(val1, val2)\n          : val1 !== val2\n      ) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `select-multiple`;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import { FieldElement } from '../types';\n\nimport isCheckBoxInput from './isCheckBoxInput';\nimport isRadioInput from './isRadioInput';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","export default typeof window !== 'undefined' &&\n  typeof window.HTMLElement !== 'undefined' &&\n  typeof document !== 'undefined';\n","import { Ref } from '../types';\n\nimport isHTMLElement from './isHTMLElement';\n\nexport default (ref: Ref) => isHTMLElement(ref) && document.contains(ref);\n","import isBoolean from './isBoolean';\nimport isEmptyObject from './isEmptyObject';\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport stringToPath from './stringToPath';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import isUndefined from '../utils/isUndefined';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean | undefined;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: HTMLInputElement[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.checked && !option.disabled)\n        .map((option) => option.value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    return options[0].checked && !options[0].disabled\n      ? // @ts-expect-error expected to work in the browser\n        options[0].attributes && !isUndefined(options[0].attributes.value)\n        ? isUndefined(options[0].value) || options[0].value === ''\n          ? validResult\n          : { value: options[0].value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import { Field } from '../types';\nimport isUndefined from '../utils/isUndefined';\n\nexport default (\n  value: any,\n  { valueAsNumber, valueAsDate, setValueAs }: Field['_f'],\n) =>\n  isUndefined(value)\n    ? value\n    : valueAsNumber\n    ? value === ''\n      ? NaN\n      : +value\n    : valueAsDate\n    ? new Date(value)\n    : setValueAs\n    ? setValueAs(value)\n    : value;\n","type RadioFieldResult = {\n  isValid: boolean;\n  value: number | string | null;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: null,\n};\n\nexport default (options?: HTMLInputElement[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.checked && !option.disabled\n            ? {\n                isValid: true,\n                value: option.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { Field } from '../types';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isFileInput from '../utils/isFileInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isRadioInput from '../utils/isRadioInput';\nimport isUndefined from '../utils/isUndefined';\n\nimport getCheckboxValue from './getCheckboxValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getRadioValue from './getRadioValue';\n\nexport default function getFieldValue(_f: Field['_f']) {\n  const ref = _f.ref;\n\n  if (_f.refs ? _f.refs.every((ref) => ref.disabled) : ref.disabled) {\n    return;\n  }\n\n  if (isFileInput(ref)) {\n    return ref.files;\n  }\n\n  if (isRadioInput(ref)) {\n    return getRadioValue(_f.refs).value;\n  }\n\n  if (isMultipleSelect(ref)) {\n    return [...ref.selectedOptions].map(({ value }) => value);\n  }\n\n  if (isCheckBox(ref)) {\n    return getCheckboxValue(_f.refs).value;\n  }\n\n  return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\n","import {\n  CriteriaMode,\n  Field,\n  FieldName,\n  FieldRefs,\n  InternalFieldName,\n} from '../types';\nimport { get } from '../utils';\nimport set from '../utils/set';\n\nexport default <TFieldValues>(\n  fieldsNames: Set<InternalFieldName> | InternalFieldName[],\n  _fields: FieldRefs,\n  criteriaMode?: CriteriaMode,\n  shouldUseNativeValidation?: boolean | undefined,\n) => {\n  const fields: Record<InternalFieldName, Field['_f']> = {};\n\n  for (const name of fieldsNames) {\n    const field: Field = get(_fields, name);\n\n    field && set(fields, name, field._f);\n  }\n\n  return {\n    criteriaMode,\n    names: [...fieldsNames] as FieldName<TFieldValues>[],\n    fields,\n    shouldUseNativeValidation,\n  };\n};\n","import { Field } from '../types';\n\nexport default (options: Field['_f']) =>\n  options.mount &&\n  (options.required ||\n    options.min ||\n    options.max ||\n    options.maxLength ||\n    options.minLength ||\n    options.pattern ||\n    options.validate);\n","import { FieldError, FieldErrors, FieldValues } from '../types';\nimport get from '../utils/get';\nimport isKey from '../utils/isKey';\n\nexport default function schemaErrorLookup(\n  errors: FieldErrors,\n  _fields: FieldValues,\n  name: string,\n): {\n  error?: FieldError;\n  name: string;\n} {\n  const error = get(errors, name);\n\n  if (error || isKey(name)) {\n    return {\n      error,\n      name,\n    };\n  }\n\n  const names = name.split('.');\n\n  while (names.length) {\n    const fieldName = names.join('.');\n    const field = get(_fields, fieldName);\n    const foundError = get(errors, fieldName);\n\n    if (field && !Array.isArray(field) && name !== fieldName) {\n      return { name };\n    }\n\n    if (foundError && foundError.type) {\n      return {\n        name: fieldName,\n        error: foundError,\n      };\n    }\n\n    names.pop();\n  }\n\n  return {\n    name,\n  };\n}\n","import isObject from './isObject';\nimport isPrimitive from './isPrimitive';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>,\n>(target: T, source: U): T & U {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    try {\n      target[key] =\n        (isObject(targetValue) && isObject(sourceValue)) ||\n        (Array.isArray(targetValue) && Array.isArray(sourceValue))\n          ? deepMerge(targetValue, sourceValue)\n          : sourceValue;\n    } catch {}\n  }\n\n  return target;\n}\n","import { get } from '../utils';\nimport deepEqual from '../utils/deepEqual';\nimport { deepMerge } from '../utils/deepMerge';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport set from '../utils/set';\n\nfunction setDirtyFields<\n  T extends Record<string, unknown>[],\n  U extends Record<string, unknown>[],\n  K extends Record<string, boolean | []>,\n>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n  parentNode?: K,\n  parentName?: keyof K,\n) {\n  let index = -1;\n\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setDirtyFields(\n          values[index][key] as T,\n          get(defaultValues[index] || {}, key, []),\n          dirtyFields[index][key] as [],\n          dirtyFields[index],\n          key,\n        );\n      } else {\n        !isNullOrUndefined(defaultValues) &&\n        deepEqual(get(defaultValues[index] || {}, key), values[index][key])\n          ? set(dirtyFields[index] || {}, key)\n          : (dirtyFields[index] = {\n              ...dirtyFields[index],\n              [key]: true,\n            });\n      }\n    }\n\n    parentNode &&\n      !dirtyFields.length &&\n      delete parentNode[parentName as keyof K];\n  }\n\n  return dirtyFields;\n}\n\nexport default <T extends U, U extends Record<string, unknown>[]>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n) =>\n  deepMerge(\n    setDirtyFields(values, defaultValues, dirtyFields.slice(0, values.length)),\n    setDirtyFields(defaultValues, values, dirtyFields.slice(0, values.length)),\n  );\n","export default (\n  isBlurEvent: boolean,\n  isTouched: boolean,\n  isSubmitted: boolean,\n  reValidateMode: {\n    isOnBlur: boolean;\n    isOnChange: boolean;\n  },\n  mode: Partial<{\n    isOnSubmit: boolean;\n    isOnBlur: boolean;\n    isOnChange: boolean;\n    isOnTouch: boolean;\n    isOnAll: boolean;\n  }>,\n) => {\n  if (mode.isOnAll) {\n    return false;\n  } else if (!isSubmitted && mode.isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","import compact from '../utils/compact';\nimport get from '../utils/get';\nimport unset from '../utils/unset';\n\nexport default <T>(ref: T, name: string) =>\n  !compact(get(ref, name, [])).length && unset(ref, name);\n","import * as React from 'react';\n\nimport { Message } from '../types';\nimport isString from '../utils/isString';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || React.isValidElement(value as JSX.Element);\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import { FieldError, Ref, ValidateResult } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (\n    isMessage(result) ||\n    (Array.isArray(result) && result.every(isMessage)) ||\n    (isBoolean(result) && !result)\n  ) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import { ValidationRule } from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","import { INPUT_VALIDATION_RULES } from '../constants';\nimport { Field, FieldError, InternalFieldErrors, Message } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isMessage from '../utils/isMessage';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isRadioInput from '../utils/isRadioInput';\nimport isRegex from '../utils/isRegex';\nimport isString from '../utils/isString';\n\nimport appendErrors from './appendErrors';\nimport getCheckboxValue from './getCheckboxValue';\nimport getRadioValue from './getRadioValue';\nimport getValidateError from './getValidateError';\nimport getValueAndMessage from './getValueAndMessage';\n\nexport default async (\n  field: Field,\n  inputValue: any,\n  validateAllFieldCriteria: boolean,\n  shouldUseNativeValidation?: boolean,\n): Promise<InternalFieldErrors> => {\n  const {\n    ref,\n    refs,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n    name,\n    valueAsNumber,\n    mount,\n    disabled,\n  } = field._f;\n  if (!mount || disabled) {\n    return {};\n  }\n  const inputRef: HTMLInputElement = refs ? refs[0] : (ref as HTMLInputElement);\n  const setCustomValidty = (message?: string | boolean) => {\n    if (shouldUseNativeValidation && inputRef.reportValidity) {\n      inputRef.setCustomValidity(isBoolean(message) ? '' : message || ' ');\n      inputRef.reportValidity();\n    }\n  };\n  const error: InternalFieldErrors = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty =\n    ((valueAsNumber || isFileInput(ref)) && !ref.value) ||\n    inputValue === '' ||\n    (Array.isArray(inputValue) && !inputValue.length);\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\n      (isBoolean(inputValue) && !inputValue) ||\n      (isCheckBox && !getCheckboxValue(refs).isValid) ||\n      (isRadio && !getRadioValue(refs).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: inputRef,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(message);\n        return error;\n      }\n    }\n  }\n\n  if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNaN(inputValue)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(inputValue);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(inputValue);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if ((maxLength || minLength) && !isEmpty && isString(inputValue)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      inputValue.length > maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      inputValue.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty && isString(inputValue)) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(message);\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    if (isFunction(validate)) {\n      const result = await validate(inputValue);\n      const validateError = getValidateError(result, inputRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          setCustomValidty(validateError.message);\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n\n      for (const key in validate) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateError = getValidateError(\n          await validate[key](inputValue),\n          inputRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          setCustomValidty(validateError.message);\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: inputRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  setCustomValidty(true);\n  return error;\n};\n","import { EVENTS, VALIDATION_MODE } from '../constants';\nimport {\n  BatchFieldArrayUpdate,\n  ChangeHandler,\n  DeepPartial,\n  DelayCallback,\n  Field,\n  FieldError,\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldPath,\n  FieldRefs,\n  FieldValues,\n  FormState,\n  GetIsDirty,\n  InternalFieldName,\n  Names,\n  Path,\n  Ref,\n  ResolverResult,\n  SetFieldValue,\n  SetValueConfig,\n  Subjects,\n  UnpackNestedValue,\n  UseFormClearErrors,\n  UseFormGetValues,\n  UseFormHandleSubmit,\n  UseFormProps,\n  UseFormRegister,\n  UseFormRegisterReturn,\n  UseFormReset,\n  UseFormResetField,\n  UseFormReturn,\n  UseFormSetError,\n  UseFormSetFocus,\n  UseFormSetValue,\n  UseFormTrigger,\n  UseFormUnregister,\n  UseFormWatch,\n  WatchInternal,\n  WatchObserver,\n} from '../types';\nimport { set } from '../utils';\nimport cloneObject from '../utils/cloneObject';\nimport compact from '../utils/compact';\nimport convertToArrayPayload from '../utils/convertToArrayPayload';\nimport createSubject from '../utils/createSubject';\nimport deepEqual from '../utils/deepEqual';\nimport get from '../utils/get';\nimport getValidationModes from '../utils/getValidationModes';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDateObject from '../utils/isDateObject';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isHTMLElement from '../utils/isHTMLElement';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isPrimitive from '../utils/isPrimitive';\nimport isRadioOrCheckboxFunction from '../utils/isRadioOrCheckbox';\nimport isString from '../utils/isString';\nimport isUndefined from '../utils/isUndefined';\nimport isWeb from '../utils/isWeb';\nimport live from '../utils/live';\nimport omit from '../utils/omit';\nimport unset from '../utils/unset';\n\nimport focusFieldBy from './focusFieldBy';\nimport { generateWatchOutput } from './generateWatchOutput';\nimport getFieldValue from './getFieldValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getResolverOptions from './getResolverOptions';\nimport hasValidation from './hasValidation';\nimport isNameInFieldArray from './isNameInFieldArray';\nimport isWatched from './isWatched';\nimport schemaErrorLookup from './schemaErrorLookup';\nimport setFieldArrayDirtyFields from './setFieldArrayDirtyFields';\nimport skipValidation from './skipValidation';\nimport unsetEmptyArray from './unsetEmptyArray';\nimport validateField from './validateField';\n\nconst defaultOptions = {\n  mode: VALIDATION_MODE.onSubmit,\n  reValidateMode: VALIDATION_MODE.onChange,\n  shouldFocusError: true,\n} as const;\n\nconst isWindowUndefined = typeof window === 'undefined';\n\nexport function createFormControl<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): Omit<UseFormReturn<TFieldValues, TContext>, 'formState'> {\n  let _options = {\n    ...defaultOptions,\n    ...props,\n  };\n  let _formState: FormState<TFieldValues> = {\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {} as FieldErrors<TFieldValues>,\n  };\n  let _fields = {};\n  let _defaultValues = _options.defaultValues || {};\n  let _formValues = _options.shouldUnregister\n    ? {}\n    : cloneObject(_defaultValues);\n  let _stateFlags = {\n    action: false,\n    mount: false,\n    watch: false,\n  };\n  let _names: Names = {\n    mount: new Set(),\n    unMount: new Set(),\n    array: new Set(),\n    watch: new Set(),\n  } as Names;\n  let delayErrorCallback: DelayCallback;\n  let timer = 0;\n  let validateFields: Record<InternalFieldName, number> = {};\n  const _proxyFormState = {\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  };\n  const _subjects: Subjects<TFieldValues> = {\n    watch: createSubject(),\n    array: createSubject(),\n    state: createSubject(),\n  };\n\n  const validationModeBeforeSubmit = getValidationModes(_options.mode);\n  const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\n  const shouldDisplayAllAssociatedErrors =\n    _options.criteriaMode === VALIDATION_MODE.all;\n\n  const debounce =\n    <T extends Function>(callback: T, wait: number) =>\n    (...args: any) => {\n      clearTimeout(timer);\n      timer = window.setTimeout(() => callback(...args), wait);\n    };\n\n  const _updateValid = async (shouldSkipRender?: boolean) => {\n    let isValid = false;\n\n    if (_proxyFormState.isValid) {\n      isValid = _options.resolver\n        ? isEmptyObject((await _executeSchema()).errors)\n        : await executeBuildInValidation(_fields, true);\n\n      if (!shouldSkipRender && isValid !== _formState.isValid) {\n        _formState.isValid = isValid;\n        _subjects.state.next({\n          isValid,\n        });\n      }\n    }\n\n    return isValid;\n  };\n\n  const _updateFieldArray: BatchFieldArrayUpdate = (\n    name,\n    method,\n    args,\n    values = [],\n    shouldSetValues = true,\n    shouldSetFields = true,\n  ) => {\n    _stateFlags.action = true;\n\n    if (shouldSetFields && get(_fields, name)) {\n      const fieldValues = method(get(_fields, name), args.argA, args.argB);\n      shouldSetValues && set(_fields, name, fieldValues);\n    }\n\n    if (Array.isArray(get(_formState.errors, name))) {\n      const errors = method(get(_formState.errors, name), args.argA, args.argB);\n      shouldSetValues && set(_formState.errors, name, errors);\n      unsetEmptyArray(_formState.errors, name);\n    }\n\n    if (_proxyFormState.touchedFields && get(_formState.touchedFields, name)) {\n      const touchedFields = method(\n        get(_formState.touchedFields, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSetValues &&\n        set(_formState.touchedFields as TFieldValues, name, touchedFields);\n      unsetEmptyArray(_formState.touchedFields, name);\n    }\n\n    if (_proxyFormState.dirtyFields || _proxyFormState.isDirty) {\n      updateFieldArrayDirty(name, values);\n    }\n\n    _subjects.state.next({\n      isDirty: _getDirty(name, values),\n      dirtyFields: _formState.dirtyFields,\n      errors: _formState.errors,\n      isValid: _formState.isValid,\n    });\n  };\n\n  const updateErrors = (name: InternalFieldName, error: FieldError) => (\n    set(_formState.errors, name, error),\n    _subjects.state.next({\n      errors: _formState.errors,\n    })\n  );\n\n  const updateValidAndValue = (\n    name: InternalFieldName,\n    shouldSkipSetValueAs?: boolean,\n    ref?: Ref,\n  ) => {\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      const defaultValue = get(_formValues, name, get(_defaultValues, name));\n\n      isUndefined(defaultValue) ||\n      (ref && (ref as HTMLInputElement).defaultChecked) ||\n      shouldSkipSetValueAs\n        ? set(\n            _formValues,\n            name,\n            shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f),\n          )\n        : setFieldValue(name, defaultValue);\n    }\n\n    _stateFlags.mount && _updateValid();\n  };\n\n  const updateTouchAndDirty = (\n    name: InternalFieldName,\n    fieldValue: unknown,\n    isCurrentTouched?: boolean,\n    shouldRender = true,\n  ): Partial<\n    Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touchedFields'>\n  > => {\n    let isFieldDirty = false;\n    const output: Partial<FormState<TFieldValues>> & { name: string } = {\n      name,\n    };\n    const isPreviousFieldTouched = get(_formState.touchedFields, name);\n\n    if (_proxyFormState.isDirty) {\n      const isPreviousFormDirty = _formState.isDirty;\n\n      _formState.isDirty = output.isDirty = _getDirty();\n      isFieldDirty = isPreviousFormDirty !== output.isDirty;\n    }\n\n    if (_proxyFormState.dirtyFields && !isCurrentTouched) {\n      const isPreviousFieldDirty = get(_formState.dirtyFields, name);\n      const isCurrentFieldPristine = deepEqual(\n        get(_defaultValues, name),\n        fieldValue,\n      );\n\n      isCurrentFieldPristine\n        ? unset(_formState.dirtyFields, name)\n        : set(_formState.dirtyFields as TFieldValues, name, true);\n      output.dirtyFields = _formState.dirtyFields;\n      isFieldDirty =\n        isFieldDirty ||\n        isPreviousFieldDirty !== get(_formState.dirtyFields, name);\n    }\n\n    if (isCurrentTouched && !isPreviousFieldTouched) {\n      set(_formState.touchedFields as TFieldValues, name, isCurrentTouched);\n      output.touchedFields = _formState.touchedFields;\n      isFieldDirty =\n        isFieldDirty ||\n        (_proxyFormState.touchedFields &&\n          isPreviousFieldTouched !== isCurrentTouched);\n    }\n\n    isFieldDirty && shouldRender && _subjects.state.next(output);\n\n    return isFieldDirty ? output : {};\n  };\n\n  const updateFieldArrayDirty = (name: any, value: any) => (\n    set(\n      _formState.dirtyFields as TFieldValues,\n      name,\n      setFieldArrayDirtyFields(\n        value,\n        get(_defaultValues, name, []),\n        get(_formState.dirtyFields, name, []),\n      ),\n    ),\n    unsetEmptyArray(_formState.dirtyFields, name)\n  );\n\n  const shouldRenderByError = async (\n    shouldSkipRender: boolean,\n    name: InternalFieldName,\n    isValid: boolean,\n    error?: FieldError,\n    fieldState?: {\n      dirty?: FieldNamesMarkedBoolean<TFieldValues>;\n      isDirty?: boolean;\n      touched?: FieldNamesMarkedBoolean<TFieldValues>;\n    },\n  ): Promise<void> => {\n    const previousFieldError = get(_formState.errors, name);\n    const shouldUpdateValid =\n      _proxyFormState.isValid && _formState.isValid !== isValid;\n\n    if (props.delayError && error) {\n      delayErrorCallback =\n        delayErrorCallback || debounce(updateErrors, props.delayError);\n      delayErrorCallback(name, error);\n    } else {\n      clearTimeout(timer);\n      error\n        ? set(_formState.errors, name, error)\n        : unset(_formState.errors, name);\n    }\n\n    if (\n      ((error ? !deepEqual(previousFieldError, error) : previousFieldError) ||\n        !isEmptyObject(fieldState) ||\n        shouldUpdateValid) &&\n      !shouldSkipRender\n    ) {\n      const updatedFormState = {\n        ...fieldState,\n        ...(shouldUpdateValid ? { isValid } : {}),\n        errors: _formState.errors,\n        name,\n      };\n\n      _formState = {\n        ..._formState,\n        ...updatedFormState,\n      };\n\n      _subjects.state.next(updatedFormState);\n    }\n\n    validateFields[name]--;\n\n    if (_proxyFormState.isValidating && !validateFields[name]) {\n      _subjects.state.next({\n        isValidating: false,\n      });\n      validateFields = {};\n    }\n  };\n\n  const _executeSchema = async (name?: InternalFieldName[]) =>\n    _options.resolver\n      ? await _options.resolver(\n          { ..._formValues } as UnpackNestedValue<TFieldValues>,\n          _options.context,\n          getResolverOptions(\n            name || _names.mount,\n            _fields,\n            _options.criteriaMode,\n            _options.shouldUseNativeValidation,\n          ),\n        )\n      : ({} as ResolverResult<TFieldValues>);\n\n  const executeSchemaAndUpdateState = async (names?: InternalFieldName[]) => {\n    const { errors } = await _executeSchema();\n\n    if (names) {\n      for (const name of names) {\n        const error = get(errors, name);\n        error\n          ? set(_formState.errors, name, error)\n          : unset(_formState.errors, name);\n      }\n    } else {\n      _formState.errors = errors as FieldErrors<TFieldValues>;\n    }\n\n    return errors;\n  };\n\n  const executeBuildInValidation = async (\n    fields: FieldRefs,\n    shouldOnlyCheckValid?: boolean,\n    context = {\n      valid: true,\n    },\n  ) => {\n    for (const name in fields) {\n      const field = fields[name];\n\n      if (field) {\n        const fieldReference = field._f;\n        const fieldValue = omit(field, '_f');\n\n        if (fieldReference) {\n          const fieldError = await validateField(\n            field,\n            get(_formValues, fieldReference.name),\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation,\n          );\n\n          if (fieldError[fieldReference.name]) {\n            context.valid = false;\n\n            if (shouldOnlyCheckValid) {\n              break;\n            }\n          }\n\n          if (!shouldOnlyCheckValid) {\n            fieldError[fieldReference.name]\n              ? set(\n                  _formState.errors,\n                  fieldReference.name,\n                  fieldError[fieldReference.name],\n                )\n              : unset(_formState.errors, fieldReference.name);\n          }\n        }\n\n        fieldValue &&\n          (await executeBuildInValidation(\n            fieldValue,\n            shouldOnlyCheckValid,\n            context,\n          ));\n      }\n    }\n\n    return context.valid;\n  };\n\n  const _removeUnmounted = () => {\n    for (const name of _names.unMount) {\n      const field: Field = get(_fields, name);\n\n      field &&\n        (field._f.refs\n          ? field._f.refs.every((ref) => !live(ref))\n          : !live(field._f.ref)) &&\n        unregister(name as FieldPath<TFieldValues>);\n    }\n\n    _names.unMount = new Set();\n  };\n\n  const _getDirty: GetIsDirty = (name, data) => (\n    name && data && set(_formValues, name, data),\n    !deepEqual(getValues(), _defaultValues)\n  );\n\n  const _getWatch: WatchInternal<TFieldValues> = (\n    names,\n    defaultValue,\n    isGlobal,\n  ) => {\n    const fieldValues = {\n      ...(_stateFlags.mount\n        ? _formValues\n        : isUndefined(defaultValue)\n        ? _defaultValues\n        : isString(names)\n        ? { [names]: defaultValue }\n        : defaultValue),\n    };\n\n    return generateWatchOutput(names, _names, fieldValues, isGlobal);\n  };\n\n  const _getFieldArray = (name: InternalFieldName) =>\n    get(\n      _stateFlags.mount ? _formValues : _defaultValues,\n      name,\n      props.shouldUnregister ? get(_defaultValues, name, []) : [],\n    );\n\n  const setFieldValue = (\n    name: InternalFieldName,\n    value: SetFieldValue<TFieldValues>,\n    options: SetValueConfig = {},\n  ) => {\n    const field: Field = get(_fields, name);\n    let fieldValue: unknown = value;\n\n    if (field) {\n      const fieldReference = field._f;\n\n      if (fieldReference) {\n        set(_formValues, name, getFieldValueAs(value, fieldReference));\n\n        fieldValue =\n          isWeb && isHTMLElement(fieldReference.ref) && isNullOrUndefined(value)\n            ? ''\n            : value;\n\n        if (isFileInput(fieldReference.ref) && !isString(fieldValue)) {\n          fieldReference.ref.files = fieldValue as FileList;\n        } else if (isMultipleSelect(fieldReference.ref)) {\n          [...fieldReference.ref.options].forEach(\n            (selectRef) =>\n              (selectRef.selected = (\n                fieldValue as InternalFieldName[]\n              ).includes(selectRef.value)),\n          );\n        } else if (fieldReference.refs) {\n          if (isCheckBoxInput(fieldReference.ref)) {\n            fieldReference.refs.length > 1\n              ? fieldReference.refs.forEach(\n                  (checkboxRef) =>\n                    (checkboxRef.checked = Array.isArray(fieldValue)\n                      ? !!(fieldValue as []).find(\n                          (data: string) => data === checkboxRef.value,\n                        )\n                      : fieldValue === checkboxRef.value),\n                )\n              : (fieldReference.refs[0].checked = !!fieldValue);\n          } else {\n            fieldReference.refs.forEach(\n              (radioRef: HTMLInputElement) =>\n                (radioRef.checked = radioRef.value === fieldValue),\n            );\n          }\n        } else {\n          fieldReference.ref.value = fieldValue;\n        }\n      }\n    }\n\n    (options.shouldDirty || options.shouldTouch) &&\n      updateTouchAndDirty(name, fieldValue, options.shouldTouch);\n\n    options.shouldValidate && trigger(name as Path<TFieldValues>);\n  };\n\n  const setValues = <\n    T extends InternalFieldName,\n    K extends SetFieldValue<TFieldValues>,\n    U,\n  >(\n    name: T,\n    value: K,\n    options: U,\n  ) => {\n    for (const fieldKey in value) {\n      const fieldValue = value[fieldKey];\n      const fieldName = `${name}.${fieldKey}` as Path<TFieldValues>;\n      const field = get(_fields, fieldName);\n\n      (_names.array.has(name) ||\n        !isPrimitive(fieldValue) ||\n        (field && !field._f)) &&\n      !isDateObject(fieldValue)\n        ? setValues(fieldName, fieldValue, options)\n        : setFieldValue(fieldName, fieldValue, options);\n    }\n  };\n\n  const setValue: UseFormSetValue<TFieldValues> = (\n    name,\n    value,\n    options = {},\n  ) => {\n    const field = get(_fields, name);\n    const isFieldArray = _names.array.has(name);\n\n    set(_formValues, name, value);\n\n    if (isFieldArray) {\n      _subjects.array.next({\n        name,\n        values: _formValues,\n      });\n\n      if (\n        (_proxyFormState.isDirty || _proxyFormState.dirtyFields) &&\n        options.shouldDirty\n      ) {\n        updateFieldArrayDirty(name, value);\n\n        _subjects.state.next({\n          name,\n          dirtyFields: _formState.dirtyFields,\n          isDirty: _getDirty(name, value),\n        });\n      }\n    } else {\n      field && !field._f && !isNullOrUndefined(value)\n        ? setValues(name, value, options)\n        : setFieldValue(name, value, options);\n    }\n\n    isWatched(name, _names) && _subjects.state.next({});\n    _subjects.watch.next({\n      name,\n    });\n  };\n\n  const handleChange: ChangeHandler = async (event) => {\n    const target = event.target;\n    let name = target.name;\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      let error;\n      let isValid;\n      const fieldValue = target.type ? getFieldValue(field._f) : target.value;\n      const isBlurEvent = event.type === EVENTS.BLUR;\n      const shouldSkipValidation =\n        (!hasValidation(field._f) &&\n          !_options.resolver &&\n          !get(_formState.errors, name) &&\n          !field._f.deps) ||\n        skipValidation(\n          isBlurEvent,\n          get(_formState.touchedFields, name),\n          _formState.isSubmitted,\n          validationModeAfterSubmit,\n          validationModeBeforeSubmit,\n        );\n      const watched = isWatched(name, _names, isBlurEvent);\n\n      if (isBlurEvent) {\n        field._f.onBlur && field._f.onBlur(event);\n      } else if (field._f.onChange) {\n        field._f.onChange(event);\n      }\n\n      set(_formValues, name, fieldValue);\n\n      const fieldState = updateTouchAndDirty(\n        name,\n        fieldValue,\n        isBlurEvent,\n        false,\n      );\n\n      const shouldRender = !isEmptyObject(fieldState) || watched;\n\n      !isBlurEvent &&\n        _subjects.watch.next({\n          name,\n          type: event.type,\n        });\n\n      if (shouldSkipValidation) {\n        return (\n          shouldRender &&\n          _subjects.state.next({ name, ...(watched ? {} : fieldState) })\n        );\n      }\n\n      !isBlurEvent && watched && _subjects.state.next({});\n\n      validateFields[name] = validateFields[name] ? +1 : 1;\n\n      _proxyFormState.isValidating &&\n        _subjects.state.next({\n          isValidating: true,\n        });\n\n      if (_options.resolver) {\n        const { errors } = await _executeSchema([name]);\n        const previousErrorLookupResult = schemaErrorLookup(\n          _formState.errors,\n          _fields,\n          name,\n        );\n        const errorLookupResult = schemaErrorLookup(\n          errors,\n          _fields,\n          previousErrorLookupResult.name || name,\n        );\n\n        error = errorLookupResult.error;\n        name = errorLookupResult.name;\n\n        isValid = isEmptyObject(errors);\n      } else {\n        error = (\n          await validateField(\n            field,\n            get(_formValues, name) as Field,\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation,\n          )\n        )[name];\n\n        isValid = await _updateValid(true);\n      }\n\n      field._f.deps && trigger(field._f.deps as FieldPath<TFieldValues>[]);\n\n      shouldRenderByError(false, name, isValid, error, fieldState);\n    }\n  };\n\n  const trigger: UseFormTrigger<TFieldValues> = async (name, options = {}) => {\n    let isValid;\n    let validationResult;\n    const fieldNames = convertToArrayPayload(name) as InternalFieldName[];\n\n    _subjects.state.next({\n      isValidating: true,\n    });\n\n    if (_options.resolver) {\n      const errors = await executeSchemaAndUpdateState(\n        isUndefined(name) ? name : fieldNames,\n      );\n\n      isValid = isEmptyObject(errors);\n      validationResult = name\n        ? !fieldNames.some((name) => get(errors, name))\n        : isValid;\n    } else if (name) {\n      validationResult = (\n        await Promise.all(\n          fieldNames.map(async (fieldName) => {\n            const field = get(_fields, fieldName);\n            return await executeBuildInValidation(\n              field && field._f ? { [fieldName]: field } : field,\n            );\n          }),\n        )\n      ).every(Boolean);\n      !(!validationResult && !_formState.isValid) && _updateValid();\n    } else {\n      validationResult = isValid = await executeBuildInValidation(_fields);\n    }\n\n    _subjects.state.next({\n      ...(!isString(name) ||\n      (_proxyFormState.isValid && isValid !== _formState.isValid)\n        ? {}\n        : { name }),\n      ...(_options.resolver ? { isValid } : {}),\n      errors: _formState.errors,\n      isValidating: false,\n    });\n\n    options.shouldFocus &&\n      !validationResult &&\n      focusFieldBy(\n        _fields,\n        (key) => get(_formState.errors, key),\n        name ? fieldNames : _names.mount,\n      );\n\n    return validationResult;\n  };\n\n  const getValues: UseFormGetValues<TFieldValues> = (\n    fieldNames?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>,\n  ) => {\n    const values = {\n      ..._defaultValues,\n      ...(_stateFlags.mount ? _formValues : {}),\n    };\n\n    return isUndefined(fieldNames)\n      ? values\n      : isString(fieldNames)\n      ? get(values, fieldNames as InternalFieldName)\n      : fieldNames.map((name) => get(values, name as InternalFieldName));\n  };\n\n  const clearErrors: UseFormClearErrors<TFieldValues> = (name) => {\n    name\n      ? convertToArrayPayload(name).forEach((inputName) =>\n          unset(_formState.errors, inputName),\n        )\n      : (_formState.errors = {} as FieldErrors<TFieldValues>);\n\n    _subjects.state.next({\n      errors: _formState.errors,\n      isValid: true,\n    });\n  };\n\n  const setError: UseFormSetError<TFieldValues> = (name, error, options) => {\n    const ref = ((get(_fields, name, { _f: {} }) as Field)._f || {}).ref;\n\n    set(_formState.errors, name, {\n      ...error,\n      ref,\n    });\n\n    _subjects.state.next({\n      name,\n      errors: _formState.errors,\n      isValid: false,\n    });\n\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n\n  const watch: UseFormWatch<TFieldValues> = (\n    name?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>\n      | WatchObserver<TFieldValues>,\n    defaultValue?: unknown,\n  ) =>\n    isFunction(name)\n      ? _subjects.watch.subscribe({\n          next: (info: any) =>\n            name(\n              _getWatch(\n                undefined,\n                defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n              ),\n              info,\n            ),\n        })\n      : _getWatch(\n          name as InternalFieldName | InternalFieldName[],\n          defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n          true,\n        );\n\n  const unregister: UseFormUnregister<TFieldValues> = (name, options = {}) => {\n    for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\n      _names.mount.delete(fieldName);\n      _names.array.delete(fieldName);\n\n      if (get(_fields, fieldName)) {\n        if (!options.keepValue) {\n          unset(_fields, fieldName);\n          unset(_formValues, fieldName);\n        }\n\n        !options.keepError && unset(_formState.errors, fieldName);\n        !options.keepDirty && unset(_formState.dirtyFields, fieldName);\n        !options.keepTouched && unset(_formState.touchedFields, fieldName);\n        !_options.shouldUnregister &&\n          !options.keepDefaultValue &&\n          unset(_defaultValues, fieldName);\n      }\n    }\n\n    _subjects.watch.next({});\n\n    _subjects.state.next({\n      ..._formState,\n      ...(!options.keepDirty ? {} : { isDirty: _getDirty() }),\n    });\n\n    !options.keepIsValid && _updateValid();\n  };\n\n  const register: UseFormRegister<TFieldValues> = (name, options = {}) => {\n    const field = get(_fields, name);\n\n    set(_fields, name, {\n      _f: {\n        ...(field && field._f ? field._f : { ref: { name } }),\n        name,\n        mount: true,\n        ...options,\n      },\n    });\n    _names.mount.add(name);\n\n    !isUndefined(options.value) &&\n      !options.disabled &&\n      set(_formValues, name, get(_formValues, name, options.value));\n\n    field\n      ? isBoolean(options.disabled) &&\n        set(\n          _formValues,\n          name,\n          options.disabled\n            ? undefined\n            : get(_formValues, name, getFieldValue(field._f)),\n        )\n      : updateValidAndValue(name, true);\n\n    return isWindowUndefined\n      ? ({ name: name as InternalFieldName } as UseFormRegisterReturn)\n      : {\n          name,\n          ...(isBoolean(options.disabled)\n            ? { disabled: options.disabled }\n            : {}),\n          onChange: handleChange,\n          onBlur: handleChange,\n          ref: (ref: HTMLInputElement | null): void => {\n            if (ref) {\n              register(name, options);\n              let field: Field = get(_fields, name);\n              const fieldRef = isUndefined(ref.value)\n                ? ref.querySelectorAll\n                  ? (ref.querySelectorAll('input,select,textarea')[0] as Ref) ||\n                    ref\n                  : ref\n                : ref;\n\n              const isRadioOrCheckbox = isRadioOrCheckboxFunction(fieldRef);\n\n              if (\n                fieldRef === field._f.ref ||\n                (isRadioOrCheckbox &&\n                  compact(field._f.refs || []).find(\n                    (option) => option === fieldRef,\n                  ))\n              ) {\n                return;\n              }\n\n              field = {\n                _f: isRadioOrCheckbox\n                  ? {\n                      ...field._f,\n                      refs: [\n                        ...compact(field._f.refs || []).filter(live),\n                        fieldRef,\n                      ],\n                      ref: { type: fieldRef.type, name },\n                    }\n                  : {\n                      ...field._f,\n                      ref: fieldRef,\n                    },\n              };\n\n              set(_fields, name, field);\n\n              (!options || !options.disabled) &&\n                updateValidAndValue(name, false, fieldRef);\n            } else {\n              const field: Field = get(_fields, name, {});\n              const shouldUnregister =\n                _options.shouldUnregister || options.shouldUnregister;\n\n              if (field._f) {\n                field._f.mount = false;\n              }\n\n              shouldUnregister &&\n                !(\n                  isNameInFieldArray(_names.array, name) && _stateFlags.action\n                ) &&\n                _names.unMount.add(name);\n            }\n          },\n        };\n  };\n\n  const handleSubmit: UseFormHandleSubmit<TFieldValues> =\n    (onValid, onInvalid) => async (e) => {\n      if (e) {\n        e.preventDefault && e.preventDefault();\n        e.persist && e.persist();\n      }\n      let hasNoPromiseError = true;\n      let fieldValues: any = _options.shouldUnregister\n        ? cloneObject(_formValues)\n        : { ..._formValues };\n\n      _subjects.state.next({\n        isSubmitting: true,\n      });\n\n      try {\n        if (_options.resolver) {\n          const { errors, values } = await _executeSchema();\n          _formState.errors = errors as FieldErrors<TFieldValues>;\n          fieldValues = values;\n        } else {\n          await executeBuildInValidation(_fields);\n        }\n\n        if (\n          isEmptyObject(_formState.errors) &&\n          Object.keys(_formState.errors).every((name) => get(fieldValues, name))\n        ) {\n          _subjects.state.next({\n            errors: {} as FieldErrors<TFieldValues>,\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          onInvalid && (await onInvalid(_formState.errors, e));\n          _options.shouldFocusError &&\n            focusFieldBy(\n              _fields,\n              (key) => get(_formState.errors, key),\n              _names.mount,\n            );\n        }\n      } catch (err) {\n        hasNoPromiseError = false;\n        throw err;\n      } finally {\n        _formState.isSubmitted = true;\n        _subjects.state.next({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful:\n            isEmptyObject(_formState.errors) && hasNoPromiseError,\n          submitCount: _formState.submitCount + 1,\n          errors: _formState.errors,\n        });\n      }\n    };\n\n  const resetField: UseFormResetField<TFieldValues> = (name, options = {}) => {\n    if (isUndefined(options.defaultValue)) {\n      setValue(name, get(_defaultValues, name));\n    } else {\n      setValue(name, options.defaultValue);\n      set(_defaultValues, name, options.defaultValue);\n    }\n\n    if (!options.keepTouched) {\n      unset(_formState.touchedFields, name);\n    }\n\n    if (!options.keepDirty) {\n      unset(_formState.dirtyFields, name);\n      _formState.isDirty = options.defaultValue\n        ? _getDirty(name, get(_defaultValues, name))\n        : _getDirty();\n    }\n\n    if (!options.keepError) {\n      unset(_formState.errors, name);\n      _proxyFormState.isValid && _updateValid();\n    }\n\n    _subjects.state.next({ ..._formState });\n  };\n\n  const reset: UseFormReset<TFieldValues> = (\n    formValues,\n    keepStateOptions = {},\n  ) => {\n    const updatedValues = formValues || _defaultValues;\n    const cloneUpdatedValues = cloneObject(updatedValues);\n    const values = !isEmptyObject(formValues)\n      ? cloneUpdatedValues\n      : _defaultValues;\n\n    if (!keepStateOptions.keepDefaultValues) {\n      _defaultValues = updatedValues;\n    }\n\n    if (!keepStateOptions.keepValues) {\n      if (isWeb) {\n        for (const name of _names.mount) {\n          const field = get(_fields, name);\n          if (field && field._f) {\n            const fieldReference = Array.isArray(field._f.refs)\n              ? field._f.refs[0]\n              : field._f.ref;\n\n            try {\n              isHTMLElement(fieldReference) &&\n                fieldReference.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n\n      _formValues = props.shouldUnregister\n        ? keepStateOptions.keepDefaultValues\n          ? cloneObject(_defaultValues)\n          : {}\n        : cloneUpdatedValues;\n      _fields = {};\n\n      _subjects.watch.next({\n        values,\n      });\n\n      _subjects.array.next({\n        values,\n      });\n    }\n\n    _names = {\n      mount: new Set(),\n      unMount: new Set(),\n      array: new Set(),\n      watch: new Set(),\n      watchAll: false,\n      focus: '',\n    };\n\n    _subjects.state.next({\n      submitCount: keepStateOptions.keepSubmitCount\n        ? _formState.submitCount\n        : 0,\n      isDirty: keepStateOptions.keepDirty\n        ? _formState.isDirty\n        : keepStateOptions.keepDefaultValues\n        ? !deepEqual(formValues, _defaultValues)\n        : false,\n      isSubmitted: keepStateOptions.keepIsSubmitted\n        ? _formState.isSubmitted\n        : false,\n      dirtyFields: keepStateOptions.keepDirty\n        ? _formState.dirtyFields\n        : ((keepStateOptions.keepDefaultValues && formValues\n            ? Object.entries(formValues).reduce(\n                (previous, [key, value]) => ({\n                  ...previous,\n                  [key]: value !== get(_defaultValues, key),\n                }),\n                {},\n              )\n            : {}) as FieldNamesMarkedBoolean<TFieldValues>),\n      touchedFields: keepStateOptions.keepTouched\n        ? _formState.touchedFields\n        : ({} as FieldNamesMarkedBoolean<TFieldValues>),\n      errors: keepStateOptions.keepErrors\n        ? _formState.errors\n        : ({} as FieldErrors<TFieldValues>),\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n\n    _stateFlags.mount =\n      !_proxyFormState.isValid || !!keepStateOptions.keepIsValid;\n    _stateFlags.watch = !!props.shouldUnregister;\n  };\n\n  const setFocus: UseFormSetFocus<TFieldValues> = (name) => {\n    const field = get(_fields, name)._f;\n    (field.ref.focus ? field.ref : field.refs[0]).focus();\n  };\n\n  return {\n    control: {\n      register,\n      unregister,\n      _executeSchema,\n      _getWatch,\n      _getDirty,\n      _updateValid,\n      _removeUnmounted,\n      _updateFieldArray,\n      _getFieldArray,\n      _subjects,\n      _proxyFormState,\n      get _fields() {\n        return _fields;\n      },\n      set _fields(value) {\n        _fields = value;\n      },\n      get _formValues() {\n        return _formValues;\n      },\n      set _formValues(value) {\n        _formValues = value;\n      },\n      get _stateFlags() {\n        return _stateFlags;\n      },\n      set _stateFlags(value) {\n        _stateFlags = value;\n      },\n      get _defaultValues() {\n        return _defaultValues;\n      },\n      set _defaultValues(value) {\n        _defaultValues = value;\n      },\n      get _names() {\n        return _names;\n      },\n      set _names(value) {\n        _names = value;\n      },\n      get _formState() {\n        return _formState;\n      },\n      set _formState(value) {\n        _formState = value;\n      },\n      get _options() {\n        return _options;\n      },\n      set _options(value) {\n        _options = {\n          ..._options,\n          ...value,\n        };\n      },\n    },\n    trigger,\n    register,\n    handleSubmit,\n    watch,\n    setValue,\n    getValues,\n    reset,\n    resetField,\n    clearErrors,\n    unregister,\n    setError,\n    setFocus,\n  };\n}\n","import * as React from 'react';\n\nimport { createFormControl } from './logic/createFormControl';\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport {\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldValues,\n  FormState,\n  UseFormProps,\n  UseFormReturn,\n} from './types';\nimport { useSubscribe } from './useSubscribe';\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): UseFormReturn<TFieldValues, TContext> {\n  const _formControl = React.useRef<\n    UseFormReturn<TFieldValues, TContext> | undefined\n  >();\n  const [formState, updateFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {} as FieldErrors<TFieldValues>,\n  });\n\n  if (_formControl.current) {\n    _formControl.current.control._options = props;\n  } else {\n    _formControl.current = {\n      ...createFormControl(props),\n      formState,\n    };\n  }\n\n  const control = _formControl.current.control;\n\n  useSubscribe({\n    subject: control._subjects.state,\n    callback: (value) => {\n      if (shouldRenderFormState(value, control._proxyFormState, true)) {\n        control._formState = {\n          ...control._formState,\n          ...value,\n        };\n\n        updateFormState({ ...control._formState });\n      }\n    },\n  });\n\n  React.useEffect(() => {\n    if (!control._stateFlags.mount) {\n      control._proxyFormState.isValid && control._updateValid();\n      control._stateFlags.mount = true;\n    }\n    if (control._stateFlags.watch) {\n      control._stateFlags.watch = false;\n      control._subjects.state.next({});\n    }\n    control._removeUnmounted();\n  });\n\n  _formControl.current.formState = getProxyFormState(\n    formState,\n    control._proxyFormState,\n  );\n\n  return _formControl.current;\n}\n"],"sourceRoot":""}