{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js","../../src/utils/isCheckBoxInput.ts","../../src/utils/isDateObject.ts","../../src/utils/isNullOrUndefined.ts","../../src/utils/isObject.ts","../../src/logic/isNameInFieldArray.ts","../../src/logic/getNodeParentName.ts","../../src/utils/compact.ts","../../src/utils/isUndefined.ts","../../src/utils/get.ts","../../src/constants.ts","../../src/utils/omit.ts","../../src/logic/getProxyFormState.ts","../../src/useFormContext.tsx","../../src/utils/isEmptyObject.ts","../../src/logic/shouldRenderFormState.ts","../../src/utils/convertToArrayPayload.ts","../../src/useSubscribe.ts","../../src/utils/isString.ts","../../src/logic/generateWatchOutput.ts","../../src/logic/appendErrors.ts","../../src/utils/isKey.ts","../../src/utils/stringToPath.ts","../../src/utils/set.ts","../../src/logic/focusFieldBy.ts","../../src/logic/isWatched.ts","../../src/utils/remove.ts","../../src/utils/isFunction.ts","../../src/utils/cloneObject.ts","../../src/utils/createSubject.ts","../../src/utils/isPrimitive.ts","../../src/utils/deepEqual.ts","../../src/utils/getValidationModes.ts","../../src/utils/isBoolean.ts","../../src/utils/isFileInput.ts","../../src/utils/isHTMLElement.ts","../../src/utils/isMultipleSelect.ts","../../src/utils/isRadioInput.ts","../../src/utils/isRadioOrCheckbox.ts","../../src/utils/isWeb.ts","../../src/utils/live.ts","../../src/utils/unset.ts","../../src/logic/getCheckboxValue.ts","../../src/logic/getFieldValueAs.ts","../../src/logic/getRadioValue.ts","../../src/logic/getFieldValue.ts","../../src/logic/getResolverOptions.ts","../../src/logic/hasValidation.ts","../../src/logic/schemaErrorLookup.ts","../../src/utils/deepMerge.ts","../../src/logic/setFieldArrayDirtyFields.ts","../../src/logic/skipValidation.ts","../../src/logic/unsetEmptyArray.ts","../../src/utils/isMessage.ts","../../src/utils/isRegex.ts","../../src/logic/getValidateError.ts","../../src/logic/getValueAndMessage.ts","../../src/logic/validateField.ts","../../src/logic/createFormControl.ts","../../src/useForm.ts"],"names":["ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread2","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","defineProperty","element","type","data","Date","value","isObjectType","isNullOrUndefined","Array","isArray","isDateObject","names","name","some","current","substring","search","getNodeParentName","Boolean","val","undefined","obj","path","defaultValue","isObject","result","compact","split","reduce","isUndefined","EVENTS","VALIDATION_MODE","INPUT_VALIDATION_RULES","copy","formState","_proxyFormState","localProxyFormState","isRoot","createGetter","prop","get","formStateData","omit","isEmptyObject","find","useSubscribe","props","_props","subscription","disabled","subject","subscribe","next","callback","unsubscribe","tearDown","generateWatchOutput","_names","formValues","isGlobal","isString","watch","add","map","fieldName","watchAll","validateAllFieldCriteria","errors","message","types","test","input","replace","set","index","tempPath","isKey","stringToPath","lastIndex","newValue","objValue","isNaN","focusFieldBy","fields","fieldsNames","field","_f","ref","focus","refs","isBlurEvent","has","watchName","startsWith","slice","cloneObject","Set","isFunction","createSubject","_observers","observers","observer","o","deepEqual","object1","object2","isPrimitive","getTime","keys1","keys2","val1","includes","val2","mode","isOnSubmit","isOnBlur","isOnChange","isOnAll","isOnTouch","HTMLElement","isRadioInput","isCheckBoxInput","window","document","isHTMLElement","contains","unset","previousObjRef","updatePath","childObject","baseGet","k","objectRef","currentPaths","currentPathsLength","item","isBoolean","defaultResult","isValid","validResult","options","values","option","checked","attributes","valueAsNumber","valueAsDate","setValueAs","NaN","defaultReturn","previous","getFieldValue","every","isFileInput","files","getRadioValue","isMultipleSelect","selectedOptions","isCheckBox","getCheckboxValue","getFieldValueAs","_fields","criteriaMode","shouldUseNativeValidation","mount","required","min","max","maxLength","minLength","pattern","validate","schemaErrorLookup","error","join","foundError","pop","deepMerge","targetValue","sourceValue","setDirtyFields","defaultValues","dirtyFields","parentNode","parentName","isTouched","isSubmitted","reValidateMode","RegExp","getValidateError","isMessage","validationData","isRegex","inputValue","a","inputRef","setCustomValidty","reportValidity","setCustomValidity","isRadio","isRadioOrCheckbox","isEmpty","appendErrorsCurry","appendErrors","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getValueAndMessage","maxOutput","minOutput","valueDate","exceedMin","valueNumber","parseFloat","maxLengthOutput","minLengthOutput","patternValue","match","validateError","validationResult","defaultOptions","shouldFocusError","isWindowUndefined","createFormControl","delayErrorCallback","_options","_formState","isDirty","isValidating","submitCount","touchedFields","isSubmitting","isSubmitSuccessful","_defaultValues","_formValues","shouldUnregister","_stateFlags","action","unMount","array","timer","validateFields","_subjects","state","validationModeBeforeSubmit","getValidationModes","validationModeAfterSubmit","shouldDisplayAllAssociatedErrors","debounce","wait","args","clearTimeout","setTimeout","_updateValid","shouldSkipRender","resolver","_executeSchema","executeBuildInValidation","_updateFieldArray","method","shouldSetValues","shouldSetFields","fieldValues","argA","argB","unsetEmptyArray","updateFieldArrayDirty","_getDirty","updateErrors","updateValidAndValue","shouldSkipSetValueAs","defaultChecked","setFieldValue","updateTouchAndDirty","fieldValue","isCurrentTouched","shouldRender","isFieldDirty","output","isPreviousFieldTouched","isPreviousFormDirty","isPreviousFieldDirty","isCurrentFieldPristine","setFieldArrayDirtyFields","shouldRenderByError","fieldState","previousFieldError","shouldUpdateValid","delayError","updatedFormState","context","getResolverOptions","executeSchemaAndUpdateState","shouldOnlyCheckValid","valid","fieldReference","validateField","fieldError","_removeUnmounted","live","unregister","getValues","_getWatch","_getFieldArray","isWeb","selectRef","selected","checkboxRef","radioRef","shouldDirty","shouldTouch","shouldValidate","trigger","setValues","fieldKey","setValue","isFieldArray","isWatched","handleChange","event","shouldSkipValidation","hasValidation","deps","skipValidation","watched","onBlur","onChange","previousErrorLookupResult","errorLookupResult","fieldNames","convertToArrayPayload","Promise","all","shouldFocus","clearErrors","inputName","setError","info","delete","keepValue","keepError","keepDirty","keepTouched","keepDefaultValue","keepIsValid","register","fieldRef","querySelectorAll","isRadioOrCheckboxFunction","isNameInFieldArray","handleSubmit","onValid","onInvalid","e","preventDefault","persist","hasNoPromiseError","resetField","reset","keepStateOptions","updatedValues","cloneUpdatedValues","keepDefaultValues","keepValues","closest","keepSubmitCount","keepIsSubmitted","entries","keepErrors","setFocus","control","useForm","_formControl","updateFormState","shouldRenderFormState","getProxyFormState"],"mappings":"gJAAA,6CAEA,SAASA,EAAQC,EAAQC,GACvB,IAAIC,EAAOC,OAAOD,KAAKF,GAEvB,GAAIG,OAAOC,sBAAuB,CAChC,IAAIC,EAAUF,OAAOC,sBAAsBJ,GACvCC,IAAgBI,EAAUA,EAAQC,QAAO,SAAUC,GACrD,OAAOJ,OAAOK,yBAAyBR,EAAQO,GAAKE,eAEtDP,EAAKQ,KAAKC,MAAMT,EAAMG,GAGxB,OAAOH,EAGM,SAASU,EAAeC,GACrC,IAAK,IAAIC,EAAI,EAAGA,EAAIC,UAAUC,OAAQF,IAAK,CACzC,IAAIG,EAAyB,MAAhBF,UAAUD,GAAaC,UAAUD,GAAK,GAE/CA,EAAI,EACNf,EAAQI,OAAOc,IAAS,GAAMC,SAAQ,SAAUC,GAC9C,YAAeN,EAAQM,EAAKF,EAAOE,OAE5BhB,OAAOiB,0BAChBjB,OAAOkB,iBAAiBR,EAAQV,OAAOiB,0BAA0BH,IAEjElB,EAAQI,OAAOc,IAASC,SAAQ,SAAUC,GACxChB,OAAOmB,eAAeT,EAAQM,EAAKhB,OAAOK,yBAAyBS,EAAQE,OAKjF,OAAON,I,uIC/BT,EAAe,SAACU,GAAD,MACI,aAAjBA,EAAQC,MCHV,EAAe,SAACC,GAAD,OAAmBA,aAAgBC,MCAlD,EAAe,SAACC,GAAD,OAAwD,MAATA,GCGjDC,EAAe,SAACD,GAAD,MAAqC,kBAAVA,GAEvD,EAAe,SAAmBA,GAAnB,OACZE,EAAkBF,KAClBG,MAAMC,QAAQJ,IACfC,EAAaD,KACZK,EAAaL,ICLhB,EAAe,SAACM,EAA+BC,GAAhC,OACb,YAAID,GAAOE,MAAK,SAACC,GAAD,OCLH,SAACF,GAAD,OAAkBA,EAAKG,UAAU,EAAGH,EAAKI,OAAO,SAAWJ,EDK3CK,CAAkBL,KAAUE,MEL3D,EAAe,SAACT,GAAD,OAAkBA,EAAMrB,OAAOkC,UCA9C,EAAe,SAACC,GAAD,YAA4CC,IAARD,GCKnD,EAAe,SAAIE,EAAQC,EAAcC,GACvC,GAAIC,EAASH,IAAQC,EAAM,CACzB,IAAMG,EAASC,EAAQJ,EAAKK,MAAM,cAAcC,QAC9C,SAACH,EAAQ5B,GAAT,OAAkBU,EAAkBkB,GAAUA,EAASA,EAAO5B,KAC9DwB,GAGF,OAAOQ,EAAYJ,IAAWA,IAAWJ,EACrCQ,EAAYR,EAAIC,IACdC,EACAF,EAAIC,GACNG,ICdKK,EACL,OAIKC,EACH,SADGA,EAED,WAFCA,EAGD,WAHCA,EAIA,YAJAA,EAKN,MAGMC,EACN,MADMA,EAEN,MAFMA,EAGA,YAHAA,EAIA,YAJAA,EAKF,UALEA,EAMD,WANCA,EAOD,WCtBZ,EAAe,SACbrC,EACAE,GAEA,IAAMoC,EAAO,OAAH,UAAQtC,GAGlB,cAFOsC,EAAKpC,GAELoC,GCJT,GCEwB,gBAA0C,MDFnD,SACbC,EACAC,EACAC,GACa,IAAbC,IAAa,yDAEb,SAASC,EAAaC,GACpB,OAAO,WACL,GAAIA,KAAQL,EAKV,OAJIC,EAAgBI,KAAUR,IAC5BI,EAAgBI,IAASF,GAAUN,GAErCK,IAAwBA,EAAoBG,IAAQ,GAC7CL,EAAUK,IAMvB,IAAMd,EAAS,GACf,IAAK,IAAM5B,KAAOqC,EAChBrD,OAAOmB,eAAeyB,EAAQ5B,EAAK,CACjC2C,IAAKF,EAAazC,KAItB,OAAO4B,IEzBT,EAAe,SAACpB,GAAD,OACbmB,EAASnB,KAAWxB,OAAOD,KAAKyB,GAAOX,QCAzC,EAAe,SACb+C,EACAN,EACAE,GAEA,IAAMH,EAAYQ,EAAKD,EAAe,QAEtC,OACEE,EAAcT,IACdrD,OAAOD,KAAKsD,GAAWxC,QAAUb,OAAOD,KAAKuD,GAAiBzC,QAC9Db,OAAOD,KAAKsD,GAAWU,MACrB,SAAC/C,GAAD,OACEsC,EAAgBtC,OACdwC,GAAUN,OClBpB,EAAe,SAAI1B,GAAJ,OAAkBG,MAAMC,QAAQJ,GAASA,EAAQ,CAACA,I,SCUjDwC,EAAgBC,GAC9B,IAAMC,EAAS,SAAaD,GAC5BC,EAAOjC,QAAUgC,EAEjB,aAAgB,WACd,IAMME,GACHF,EAAMG,UACPF,EAAOjC,QAAQoC,QAAQC,UAAU,CAC/BC,KAAML,EAAOjC,QAAQuC,WAGzB,OAAO,kBAZU,SAACL,GACZA,GACFA,EAAaM,cAUJC,CAASP,MACrB,CAACF,EAAMG,WC5BZ,MAAe,SAAC5C,GAAD,MAAsD,kBAAVA,G,SCI3CmD,EACd7C,EACA8C,EACAC,EACAC,GAEA,IAAMlD,EAAUD,MAAMC,QAAQE,GAC9B,OAAIiD,EAASjD,IACXgD,GAAYF,EAAOI,MAAMC,IAAInD,GACtB6B,EAAIkB,EAAY/C,IAGrBF,EACKE,EAAMoD,KACX,SAACC,GAAD,OACEL,GAAYF,EAAOI,MAAMC,IAAIE,GAC7BxB,EAAIkB,EAAYM,OAKtBL,IAAaF,EAAOQ,UAAW,GACxBP,G,ICpBT,EAAe,SACb9C,EACAsD,EACAC,EACAjE,EACAkE,GALa,OAObF,E,+BAESC,EAAOvD,IAAK,CACfyD,MAAO,OAAF,wBACCF,EAAOvD,IAASuD,EAAOvD,GAAOyD,MAAQF,EAAOvD,GAAOyD,MAAQ,IAD7D,eAEFnE,EAAOkE,IAAW,MAGvB,ICrBN,EAAe,SAAC/D,GAAD,MAAmB,QAAQiE,KAAKjE,ICE/C,EAAe,SAACkE,GAAD,OACb7C,EAAQ6C,EAAMC,QAAQ,YAAa,IAAI7C,MAAM,W,SCGvB8C,EACtB/F,EACA4C,EACAjB,GAOA,IALA,IAAIqE,GAAS,EACPC,EAAWC,EAAMtD,GAAQ,CAACA,GAAQuD,EAAavD,GAC/C5B,EAASiF,EAASjF,OAClBoF,EAAYpF,EAAS,IAElBgF,EAAQhF,GAAQ,CACvB,IAAMG,EAAM8E,EAASD,GACjBK,EAAW1E,EAEf,GAAIqE,IAAUI,EAAW,CACvB,IAAME,EAAWtG,EAAOmB,GACxBkF,EACEvD,EAASwD,IAAaxE,MAAMC,QAAQuE,GAChCA,EACCC,OAAON,EAASD,EAAQ,IAEzB,GADA,GAGRhG,EAAOmB,GAAOkF,EACdrG,EAASA,EAAOmB,GAElB,OAAOnB,EC1BT,IAAMwG,EAAe,SAAfA,EACJC,EACA9B,EACA+B,GAA0D,oBAExCA,GAAevG,OAAOD,KAAKuG,IAFa,IAE1D,2BAAsD,KAA3CtF,EAA2C,QAC9CwF,EAAQ7C,EAAI2C,EAAQtF,GAE1B,GAAIwF,EAAO,CACT,IAAMC,EAAKD,EAAMC,GACXxE,EAAU4B,EAAK2C,EAAO,MAE5B,GAAIC,GAAMjC,EAASiC,EAAG1E,MAAO,CAC3B,GAAI0E,EAAGC,IAAIC,OAAS3D,EAAYyD,EAAGC,IAAIC,SACrC,MACK,GAAIF,EAAGG,KAAM,CAClBH,EAAGG,KAAK,GAAGD,QACX,YAEOhE,EAASV,IAClBoE,EAAapE,EAASuC,KAjB8B,gCCP5D,EAAe,SACbzC,EACA6C,EACAiC,GAHa,OAKZA,IACAjC,EAAOQ,UACNR,EAAOI,MAAM8B,IAAI/E,IACjB,YAAI6C,EAAOI,OAAOhD,MAChB,SAAC+E,GAAD,OACEhF,EAAKiF,WAAWD,IAChB,SAAStB,KAAK1D,EAAKkF,MAAMF,EAAUlG,cCG3C,IChBA,EAAe,SAACW,GAAD,MACI,oBAAVA,G,SCEe0F,EAAe5F,GACrC,IAAI8B,EACExB,EAAUD,MAAMC,QAAQN,GAE9B,GAAIA,aAAgBC,KAClB6B,EAAO,IAAI7B,KAAKD,QACX,GAAIA,aAAgB6F,IACzB/D,EAAO,IAAI+D,IAAI7F,OACV,KAAIM,IAAWe,EAASrB,GAU7B,OAAOA,EARP,IAAK,IAAMN,KADXoC,EAAOxB,EAAU,GAAK,GACJN,EAAM,CACtB,GAAI8F,EAAW9F,EAAKN,IAAO,CACzBoC,EAAO9B,EACP,MAEF8B,EAAKpC,GAAOkG,EAAY5F,EAAKN,KAMjC,OAAOoC,E,SCReiE,IACtB,IAAIC,EAA4B,GAqBhC,MAAO,CACDC,gBACF,OAAOD,GAET/C,KAvBW,SAAC/C,GAAQ,oBACG8F,GADH,IACpB,2BAAmC,SACxB/C,KAAK/C,IAFI,gCAwBpB8C,UAlBgB,SAACkD,GAEjB,OADAF,EAAW/G,KAAKiH,GACT,CACL/C,YAAa,WACX6C,EAAaA,EAAWnH,QAAO,SAACsH,GAAD,OAAOA,IAAMD,QAehD/C,YAVkB,WAClB6C,EAAa,KC9BjB,MAAe,SAAC9F,GAAD,OACbE,EAAkBF,KAAWC,EAAaD,I,SCDpBkG,EAAUC,EAAcC,GAC9C,GAAIC,EAAYF,IAAYE,EAAYD,GACtC,OAAOD,IAAYC,EAGrB,GAAI/F,EAAa8F,IAAY9F,EAAa+F,GACxC,OAAOD,EAAQG,YAAcF,EAAQE,UAGvC,IAAMC,EAAQ/H,OAAOD,KAAK4H,GACpBK,EAAQhI,OAAOD,KAAK6H,GAE1B,GAAIG,EAAMlH,SAAWmH,EAAMnH,OACzB,OAAO,EAGT,cAAkBkH,EAAlB,eAAyB,CAApB,IAAM/G,EAAG,KACNiH,EAAON,EAAQ3G,GAErB,IAAKgH,EAAME,SAASlH,GAClB,OAAO,EAGT,GAAY,QAARA,EAAe,CACjB,IAAMmH,EAAOP,EAAQ5G,GAErB,GACGa,EAAaoG,IAASpG,EAAasG,IACnCxF,EAASsF,IAAStF,EAASwF,IAC3BxG,MAAMC,QAAQqG,IAAStG,MAAMC,QAAQuG,IACjCT,EAAUO,EAAME,GACjBF,IAASE,EAEb,OAAO,GAKb,OAAO,ECxCT,MAAe,SACbC,GADa,MAQT,CACJC,YAAaD,GAAQA,IAASlF,EAC9BoF,SAAUF,IAASlF,EACnBqF,WAAYH,IAASlF,EACrBsF,QAASJ,IAASlF,EAClBuF,UAAWL,IAASlF,IChBtB,EAAe,SAAC1B,GAAD,MAAuD,mBAAVA,GCE5D,GAAe,SAACJ,GAAD,MACI,SAAjBA,EAAQC,MCHV,GAAe,SAACG,GAAD,OACbA,aAAiBkH,aCCnB,GAAe,SAACtH,GAAD,MACb,oBAAAA,EAAQC,MCDV,GAAe,SAACD,GAAD,MACI,UAAjBA,EAAQC,MCEV,GAAe,SAACqF,GAAD,OACbiC,GAAajC,IAAQkC,EAAgBlC,ICNvC,GAAiC,qBAAXmC,QACU,qBAAvBA,OAAOH,aACM,qBAAbI,SCET,GAAe,SAACpC,GAAD,OAAcqC,GAAcrC,IAAQoC,SAASE,SAAStC,I,SCc7CuC,GAAMpJ,EAAa4C,GACzC,IAIIyG,EAJEC,EAAapD,EAAMtD,GAAQ,CAACA,GAAQuD,EAAavD,GACjD2G,EACiB,GAArBD,EAAWtI,OAAchB,EAd7B,SAAiBA,EAAasJ,GAI5B,IAHA,IAAMtI,EAASsI,EAAWlC,MAAM,GAAI,GAAGpG,OACnCgF,EAAQ,EAELA,EAAQhF,GACbhB,EAASmD,EAAYnD,GAAUgG,IAAUhG,EAAOsJ,EAAWtD,MAG7D,OAAOhG,EAM6BwJ,CAAQxJ,EAAQsJ,GAC9CnI,EAAMmI,EAAWA,EAAWtI,OAAS,GAGvCuI,UACKA,EAAYpI,GAGrB,IAAK,IAAIsI,EAAI,EAAGA,EAAIH,EAAWlC,MAAM,GAAI,GAAGpG,OAAQyI,IAAK,CACvD,IAAIzD,GAAS,EACT0D,OAAS,EACPC,EAAeL,EAAWlC,MAAM,IAAKqC,EAAI,IACzCG,EAAqBD,EAAa3I,OAAS,EAMjD,IAJIyI,EAAI,IACNJ,EAAiBrJ,KAGVgG,EAAQ2D,EAAa3I,QAAQ,CACpC,IAAM6I,EAAOF,EAAa3D,GAC1B0D,EAAYA,EAAYA,EAAUG,GAAQ7J,EAAO6J,GAG/CD,IAAuB5D,IACrBlD,EAAS4G,IAAczF,EAAcyF,IACpC5H,MAAMC,QAAQ2H,KACZA,EAAUpJ,QACT,SAACmB,GAAD,OACGqB,EAASrB,KAAUwC,EAAcxC,IAAUqI,EAAUrI,MACxDT,UAENqI,SAAwBA,EAAeQ,UAAe7J,EAAO6J,IAG/DR,EAAiBK,GAIrB,OAAO1J,ECpDT,IAAM+J,GAAqC,CACzCpI,OAAO,EACPqI,SAAS,GAGLC,GAAc,CAAEtI,OAAO,EAAMqI,SAAS,GAE5C,GAAe,SAACE,GACd,GAAIpI,MAAMC,QAAQmI,GAAU,CAC1B,GAAIA,EAAQlJ,OAAS,EAAG,CACtB,IAAMmJ,EAASD,EACZ5J,QAAO,SAAC8J,GAAD,OAAYA,GAAUA,EAAOC,UAAYD,EAAO7F,YACvDc,KAAI,SAAC+E,GAAD,OAAYA,EAAOzI,SAC1B,MAAO,CAAEA,MAAOwI,EAAQH,UAAWG,EAAOnJ,QAG5C,OAAOkJ,EAAQ,GAAGG,UAAYH,EAAQ,GAAG3F,SAErC2F,EAAQ,GAAGI,aAAenH,EAAY+G,EAAQ,GAAGI,WAAW3I,OAC1DwB,EAAY+G,EAAQ,GAAGvI,QAA+B,KAArBuI,EAAQ,GAAGvI,MAC1CsI,GACA,CAAEtI,MAAOuI,EAAQ,GAAGvI,MAAOqI,SAAS,GACtCC,GACFF,GAGN,OAAOA,IC9BT,GAAe,SACbpI,EADa,OAEX4I,EAFW,EAEXA,cAAeC,EAFJ,EAEIA,YAAaC,EAFjB,EAEiBA,WAFjB,OAIbtH,EAAYxB,GACRA,EACA4I,EACU,KAAV5I,EACE+I,KACC/I,EACH6I,EACA,IAAI9I,KAAKC,GACT8I,EACAA,EAAW9I,GACXA,GCZAgJ,GAAkC,CACtCX,SAAS,EACTrI,MAAO,MAGT,GAAe,SAACuI,GAAD,OACbpI,MAAMC,QAAQmI,GACVA,EAAQhH,QACN,SAAC0H,EAAUR,GAAX,OACEA,GAAUA,EAAOC,UAAYD,EAAO7F,SAChC,CACEyF,SAAS,EACTrI,MAAOyI,EAAOzI,OAEhBiJ,IACND,IAEFA,I,SCXkBE,GAAcjE,GACpC,IAAMC,EAAMD,EAAGC,IAEf,KAAID,EAAGG,KAAOH,EAAGG,KAAK+D,OAAM,SAACjE,GAAD,OAASA,EAAItC,YAAYsC,EAAItC,UAIzD,OAAIwG,GAAYlE,GACPA,EAAImE,MAGTlC,GAAajC,GACRoE,GAAcrE,EAAGG,MAAMpF,MAG5BuJ,GAAiBrE,GACZ,YAAIA,EAAIsE,iBAAiB9F,KAAI,qBAAG1D,SAGrCyJ,EAAWvE,GACNwE,GAAiBzE,EAAGG,MAAMpF,MAG5B2J,GAAgBnI,EAAY0D,EAAIlF,OAASiF,EAAGC,IAAIlF,MAAQkF,EAAIlF,MAAOiF,GCxB5E,OAAe,SACbF,EACA6E,EACAC,EACAC,GAEA,IAF+C,EAEzChF,EAAiD,GAFR,cAI5BC,GAJ4B,IAI/C,2BAAgC,KAArBxE,EAAqB,QACxByE,EAAe7C,EAAIyH,EAASrJ,GAElCyE,GAASZ,EAAIU,EAAQvE,EAAMyE,EAAMC,KAPY,8BAU/C,MAAO,CACL4E,eACAvJ,MAAO,YAAIyE,GACXD,SACAgF,8BC1BJ,GAAe,SAACvB,GAAD,OACbA,EAAQwB,QACPxB,EAAQyB,UACPzB,EAAQ0B,KACR1B,EAAQ2B,KACR3B,EAAQ4B,WACR5B,EAAQ6B,WACR7B,EAAQ8B,SACR9B,EAAQ+B,W,SCNYC,GACtBzG,EACA8F,EACArJ,GAKA,IAAMiK,EAAQrI,EAAI2B,EAAQvD,GAE1B,GAAIiK,GAASjG,EAAMhE,GACjB,MAAO,CACLiK,QACAjK,QAMJ,IAFA,IAAMD,EAAQC,EAAKe,MAAM,KAElBhB,EAAMjB,QAAQ,CACnB,IAAMsE,EAAYrD,EAAMmK,KAAK,KACvBzF,EAAQ7C,EAAIyH,EAASjG,GACrB+G,EAAavI,EAAI2B,EAAQH,GAE/B,GAAIqB,IAAU7E,MAAMC,QAAQ4E,IAAUzE,IAASoD,EAC7C,MAAO,CAAEpD,QAGX,GAAImK,GAAcA,EAAW7K,KAC3B,MAAO,CACLU,KAAMoD,EACN6G,MAAOE,GAIXpK,EAAMqK,MAGR,MAAO,CACLpK,Q,SCxCYqK,GAGd1L,EAAWI,GACX,GAAI+G,EAAYnH,IAAWmH,EAAY/G,GACrC,OAAOA,EAGT,IAAK,IAAME,KAAOF,EAAQ,CACxB,IAAMuL,EAAc3L,EAAOM,GACrBsL,EAAcxL,EAAOE,GAE3B,IACEN,EAAOM,GACJ2B,EAAS0J,IAAgB1J,EAAS2J,IAClC3K,MAAMC,QAAQyK,IAAgB1K,MAAMC,QAAQ0K,GACzCF,GAAUC,EAAaC,GACvBA,EACN,WAGJ,OAAO5L,EClBT,SAAS6L,GAKPvC,EACAwC,EACAC,EACAC,EACAC,GAIA,IAFA,IAAI9G,GAAS,IAEJA,EAAQmE,EAAOnJ,QAAQ,CAC9B,IAAK,IAAMG,KAAOgJ,EAAOnE,GACnBlE,MAAMC,QAAQoI,EAAOnE,GAAO7E,MAC7ByL,EAAY5G,KAAW4G,EAAY5G,GAAS,IAC7C4G,EAAY5G,GAAO7E,GAAO,GAC1BuL,GACEvC,EAAOnE,GAAO7E,GACd2C,EAAI6I,EAAc3G,IAAU,GAAI7E,EAAK,IACrCyL,EAAY5G,GAAO7E,GACnByL,EAAY5G,GACZ7E,KAGDU,EAAkB8K,IACnB9E,EAAU/D,EAAI6I,EAAc3G,IAAU,GAAI7E,GAAMgJ,EAAOnE,GAAO7E,IAC1D4E,EAAI6G,EAAY5G,IAAU,GAAI7E,GAC7ByL,EAAY5G,GAAM,+BACd4G,EAAY5G,IADE,eAEhB7E,GAAM,IAKjB0L,IACGD,EAAY5L,eACN6L,EAAWC,GAGtB,OAAOF,EAGT,OAAe,SACbzC,EACAwC,EACAC,GAHa,OAKbL,GACEG,GAAevC,EAAQwC,EAAeC,EAAYxF,MAAM,EAAG+C,EAAOnJ,SAClE0L,GAAeC,EAAexC,EAAQyC,EAAYxF,MAAM,EAAG+C,EAAOnJ,WCzDtE,GAAe,SACbgG,EACA+F,EACAC,EACAC,EAIA1E,GAQA,OAAIA,EAAKI,WAEGqE,GAAezE,EAAKK,YACrBmE,GAAa/F,IACbgG,EAAcC,EAAexE,SAAWF,EAAKE,WAC9CzB,IACCgG,EAAcC,EAAevE,WAAaH,EAAKG,aACjD1B,ICnBX,GAAe,SAAIH,EAAQ3E,GAAZ,OACZc,EAAQc,EAAI+C,EAAK3E,EAAM,KAAKlB,QAAUoI,GAAMvC,EAAK3E,ICApD,GAAe,SAACP,GAAD,OACbuD,EAASvD,IAAU,iBAAqBA,ICN1C,GAAe,SAACA,GAAD,OAAqCA,aAAiBuL,Q,SCI7CC,GACtBpK,EACA8D,GACiB,IAAjBrF,EAAiB,uDAAV,WAEP,GACE4L,GAAUrK,IACTjB,MAAMC,QAAQgB,IAAWA,EAAO+H,MAAMsC,KACtCtD,EAAU/G,KAAYA,EAEvB,MAAO,CACLvB,OACAkE,QAAS0H,GAAUrK,GAAUA,EAAS,GACtC8D,OCbN,OAAe,SAACwG,GAAD,OACbvK,EAASuK,KAAoBC,GAAQD,GACjCA,EACA,CACE1L,MAAO0L,EACP3H,QAAS,KCWjB,0CAAe,WACbiB,EACA4G,EACA/H,EACAiG,GAJa,gHAAA+B,EAAA,2DAoBT7G,EAAMC,GAbRC,EAPW,EAOXA,IACAE,EARW,EAQXA,KACA4E,EATW,EASXA,SACAG,EAVW,EAUXA,UACAC,EAXW,EAWXA,UACAH,EAZW,EAYXA,IACAC,EAbW,EAaXA,IACAG,EAdW,EAcXA,QACAC,EAfW,EAeXA,SACA/J,EAhBW,EAgBXA,KACAqI,EAjBW,EAiBXA,cACAmB,EAlBW,EAkBXA,MACAnH,EAnBW,EAmBXA,SAEGmH,IAASnH,EArBD,yCAsBJ,IAtBI,UAwBPkJ,EAA6B1G,EAAOA,EAAK,GAAMF,EAC/C6G,EAAmB,SAAChI,GACpB+F,GAA6BgC,EAASE,iBACxCF,EAASG,kBAAkB9D,EAAUpE,GAAW,GAAKA,GAAW,KAChE+H,EAASE,mBAGPxB,EAA6B,GAC7B0B,EAAU/E,GAAajC,GACvBuE,EAAarC,EAAgBlC,GAC7BiH,EAAoBD,GAAWzC,EAC/B2C,GACFxD,GAAiBQ,GAAYlE,MAAUA,EAAIlF,OAC9B,KAAf4L,GACCzL,MAAMC,QAAQwL,KAAgBA,EAAWvM,OACtCgN,EAAoBC,EAAaC,KACrC,KACAhM,EACAsD,EACA2G,GAEIgC,EAAmB,SACvBC,EACAC,EACAC,GAE0C,IAD1CC,EAC0C,uDADhCjL,EACVkL,EAA0C,uDAAhClL,EAEJoC,EAAU0I,EAAYC,EAAmBC,EAC/CnC,EAAMjK,GAAK,eACTV,KAAM4M,EAAYG,EAAUC,EAC5B9I,UACAmB,OACGmH,EAAkBI,EAAYG,EAAUC,EAAS9I,MAKtDiG,MACGmC,IAAsBC,GAAWlM,EAAkB0L,KACnDzD,EAAUyD,KAAgBA,GAC1BnC,IAAeC,GAAiBtE,GAAMiD,SACtC6D,IAAY5C,GAAclE,GAAMiD,SAlExB,sBAoEgBoD,GAAUzB,GACjC,CAAEhK,QAASgK,EAAUjG,QAASiG,GAC9B8C,GAAmB9C,GAFfhK,EApEG,EAoEHA,MAAO+D,EApEJ,EAoEIA,SAIX/D,EAxEO,oBAyETwK,EAAMjK,GAAK,eACTV,KAAM8B,EACNoC,UACAmB,IAAK4G,GACFO,EAAkB1K,EAAiCoC,IAEnDF,EA/EI,wBAgFPkI,EAAiBhI,GAhFV,kBAiFAyG,GAjFA,WAsFR4B,GAAalM,EAAkB+J,IAAS/J,EAAkBgK,GAtFlD,oBAyFL6C,EAAYD,GAAmB5C,GAC/B8C,EAAYF,GAAmB7C,GAEhCrF,MAAMgH,IAUHqB,EACH/H,EAAyB2D,aAAe,IAAI9I,KAAK6L,GAChDrI,EAASwJ,EAAU/M,SACrByM,EAAYQ,EAAY,IAAIlN,KAAKgN,EAAU/M,QAEzCuD,EAASyJ,EAAUhN,SACrBkN,EAAYD,EAAY,IAAIlN,KAAKiN,EAAUhN,UAfvCmN,EACHjI,EAAyB0D,eAAiBwE,WAAWxB,GACnD1L,EAAkB6M,EAAU/M,SAC/ByM,EAAYU,EAAcJ,EAAU/M,OAEjCE,EAAkB8M,EAAUhN,SAC/BkN,EAAYC,EAAcH,EAAUhN,SAapCyM,IAAaS,EAhHN,oBAiHTV,IACIC,EACFM,EAAUhJ,QACViJ,EAAUjJ,QACVpC,EACAA,GAEGkC,EAxHI,wBAyHPkI,EAAiBvB,EAAMjK,GAAOwD,SAzHvB,kBA0HAyG,GA1HA,YA+HRL,IAAaC,GAAegC,IAAW7I,EAASqI,GA/HxC,oBAgILyB,EAAkBP,GAAmB3C,GACrCmD,GAAkBR,GAAmB1C,GACrC,IACHlK,EAAkBmN,EAAgBrN,QACnC4L,EAAWvM,OAASgO,EAAgBrN,MAChC,IACHE,EAAkBoN,GAAgBtN,QACnC4L,EAAWvM,OAASiO,GAAgBtN,OAElC,KAAa,GAzIN,oBA0ITwM,EACE,GACAa,EAAgBtJ,QAChBuJ,GAAgBvJ,SAEbF,EA/II,wBAgJPkI,EAAiBvB,EAAMjK,GAAOwD,SAhJvB,kBAiJAyG,GAjJA,YAsJTH,GAAY+B,IAAW7I,EAASqI,GAtJvB,uBAuJ8BkB,GAAmBzC,GAA7CkD,GAvJJ,GAuJHvN,MAAqB,GAvJlB,GAuJkB+D,SAEzB4H,GAAQ4B,KAAkB3B,EAAW4B,MAAMD,IAzJpC,oBA0JT/C,EAAMjK,GAAK,eACTV,KAAM8B,EACNoC,QAAA,GACAmB,OACGmH,EAAkB1K,EAAgC,KAElDkC,EAhKI,wBAiKPkI,EAAiB,IAjKV,kBAkKAvB,GAlKA,YAuKTF,EAvKS,qBAwKP1E,EAAW0E,GAxKJ,kCAyKYA,EAASsB,GAzKrB,WAyKHxK,GAzKG,SA0KHqM,GAAgBjC,GAAiBpK,GAAQ0K,IA1KtC,oBA6KPtB,EAAMjK,GAAK,+BACNkN,IACApB,EACD1K,EACA8L,GAAc1J,UAGbF,EApLE,wBAqLLkI,EAAiB0B,GAAc1J,SArL1B,kBAsLEyG,GAtLF,oCAyLArJ,EAASmJ,GAzLT,iBA0LLoD,GAAmB,GA1Ld,OAAA7B,EAAA,KA4LSvB,GA5LT,kDA4LE9K,GA5LF,WA6LF8C,EAAcoL,KAAsB7J,EA7LlC,iEAiMe2H,GAjMf,UAkMClB,EAAS9K,IAAKoM,GAlMf,yBAmMLE,EAnMK,KAoMLtM,IAHI,IAjMC,2BAwMLkO,GAAmB,OAAH,wBACX,IACArB,EAAkB7M,GAAK,GAAcuE,UAG1CgI,EAAiB,GAAchI,SAE3BF,IACF2G,EAAMjK,GAAQmN,KAhNX,2BAqNJpL,EAAcoL,IArNV,oBAsNPlD,EAAMjK,GAAK,eACT2E,IAAK4G,GACF4B,IAEA7J,EA1NE,0CA2NE2G,GA3NF,eAiObuB,GAAiB,GAjOJ,kBAkONvB,GAlOM,4CAAf,4DC8DMmD,GAAiB,CACrB/G,KAAMlF,EACN4J,eAAgB5J,EAChBkM,kBAAkB,GAGdC,GAAsC,qBAAXxG,O,SAEjByG,KAIkC,IAkC5CC,EAlCJtL,EAAgD,uDAAF,GAE1CuL,EAAW,OAAH,wBACPL,IACAlL,GAEDwL,EAAsC,CACxCC,SAAS,EACTC,cAAc,EACdlD,YAAa,GACbI,aAAa,EACb+C,YAAa,EACbC,cAAe,GACfC,cAAc,EACdC,oBAAoB,EACpBlG,SAAS,EACTvE,OAAQ,IAEN8F,EAAU,GACV4E,EAAiBR,EAAShD,eAAiB,GAC3CyD,EAAcT,EAASU,iBACvB,GACAhJ,EAAY8I,GACZG,EAAc,CAChBC,QAAQ,EACR7E,OAAO,EACPvG,OAAO,GAELJ,EAAgB,CAClB2G,MAAO,IAAIpE,IACXkJ,QAAS,IAAIlJ,IACbmJ,MAAO,IAAInJ,IACXnC,MAAO,IAAImC,KAGToJ,EAAQ,EACRC,EAAoD,GAClDlN,EAAkB,CACtBoM,SAAS,EACTjD,aAAa,EACboD,eAAe,EACfF,cAAc,EACd9F,SAAS,EACTvE,QAAQ,GAEJmL,EAAoC,CACxCzL,MAAOqC,IACPiJ,MAAOjJ,IACPqJ,MAAOrJ,KAGHsJ,EAA6BC,EAAmBpB,EAASpH,MACzDyI,EAA4BD,EAAmBpB,EAAS1C,gBACxDgE,EACJtB,EAASnE,eAAiBnI,EAEtB6N,EACJ,SAAqBvM,EAAawM,GAAlC,OACA,WAAa,2BAATC,EAAS,yBAATA,EAAS,gBACXC,aAAaX,GACbA,EAAQ1H,OAAOsI,YAAW,kBAAM3M,EAAQ,WAAR,EAAYyM,KAAOD,KAGjDI,EAAY,uCAAG,WAAOC,GAAP,eAAAhE,EAAA,yDACfxD,GAAU,GAEVvG,EAAgBuG,QAHD,qBAIP2F,EAAS8B,SAJF,6BAKbxN,EALa,SAKQyN,KALR,mBAK0BjM,OAL1B,6DAMPkM,GAAyBpG,GAAS,GAN3B,4BAIjBvB,EAJiB,KAQZwH,GAAoBxH,IAAY4F,EAAW5F,UAC9C4F,EAAW5F,QAAUA,EACrB4G,EAAUC,MAAMnM,KAAK,CACnBsF,aAXa,iCAgBZA,GAhBY,4CAAH,sDAmBZ4H,EAA2C,SAC/C1P,EACA2P,EACAT,GAGsB,IAFtBjH,EAEsB,uDAFb,GACT2H,IACsB,yDAAtBC,IAAsB,yDAItB,GAFAzB,EAAYC,QAAS,EAEjBwB,GAAmBjO,EAAIyH,EAASrJ,GAAO,CACzC,IAAM8P,EAAcH,EAAO/N,EAAIyH,EAASrJ,GAAOkP,EAAKa,KAAMb,EAAKc,MAC/DJ,GAAmB/L,EAAIwF,EAASrJ,EAAM8P,GAGxC,GAAIlQ,MAAMC,QAAQ+B,EAAI8L,EAAWnK,OAAQvD,IAAQ,CAC/C,IAAMuD,EAASoM,EAAO/N,EAAI8L,EAAWnK,OAAQvD,GAAOkP,EAAKa,KAAMb,EAAKc,MACpEJ,GAAmB/L,EAAI6J,EAAWnK,OAAQvD,EAAMuD,GAChD0M,GAAgBvC,EAAWnK,OAAQvD,GAGrC,GAAIuB,EAAgBuM,eAAiBlM,EAAI8L,EAAWI,cAAe9N,GAAO,CACxE,IAAM8N,EAAgB6B,EACpB/N,EAAI8L,EAAWI,cAAe9N,GAC9BkP,EAAKa,KACLb,EAAKc,MAEPJ,GACE/L,EAAI6J,EAAWI,cAA+B9N,EAAM8N,GACtDmC,GAAgBvC,EAAWI,cAAe9N,IAGxCuB,EAAgBmJ,aAAenJ,EAAgBoM,UACjDuC,EAAsBlQ,EAAMiI,GAG9ByG,EAAUC,MAAMnM,KAAK,CACnBmL,QAASwC,GAAUnQ,EAAMiI,GACzByC,YAAagD,EAAWhD,YACxBnH,OAAQmK,EAAWnK,OACnBuE,QAAS4F,EAAW5F,WAIlBsI,EAAe,SAACpQ,EAAyBiK,GAA1B,OACnBpG,EAAI6J,EAAWnK,OAAQvD,EAAMiK,GAC7ByE,EAAUC,MAAMnM,KAAK,CACnBe,OAAQmK,EAAWnK,UAIjB8M,EAAsB,SAC1BrQ,EACAsQ,EACA3L,GAEA,IAAMF,EAAe7C,EAAIyH,EAASrJ,GAElC,GAAIyE,EAAO,CACT,IAAM9D,EAAeiB,EAAIsM,EAAalO,EAAM4B,EAAIqM,EAAgBjO,IAEhEiB,EAAYN,IACXgE,GAAQA,EAAyB4L,gBAClCD,EACIzM,EACEqK,EACAlO,EACAsQ,EAAuB3P,EAAegI,GAAclE,EAAMC,KAE5D8L,GAAcxQ,EAAMW,GAG1ByN,EAAY5E,OAAS6F,KAGjBoB,EAAsB,SAC1BzQ,EACA0Q,EACAC,GACmB,IAAnBC,IAAmB,yDAIfC,GAAe,EACbC,EAA8D,CAClE9Q,QAEI+Q,EAAyBnP,EAAI8L,EAAWI,cAAe9N,GAE7D,GAAIuB,EAAgBoM,QAAS,CAC3B,IAAMqD,EAAsBtD,EAAWC,QAEvCD,EAAWC,QAAUmD,EAAOnD,QAAUwC,KACtCU,EAAeG,IAAwBF,EAAOnD,QAGhD,GAAIpM,EAAgBmJ,cAAgBiG,EAAkB,CACpD,IAAMM,EAAuBrP,EAAI8L,EAAWhD,YAAa1K,GACnDkR,EAAyBvL,EAC7B/D,EAAIqM,EAAgBjO,GACpB0Q,GAGFQ,EACIhK,GAAMwG,EAAWhD,YAAa1K,GAC9B6D,EAAI6J,EAAWhD,YAA6B1K,GAAM,GACtD8Q,EAAOpG,YAAcgD,EAAWhD,YAChCmG,EACEA,GACAI,IAAyBrP,EAAI8L,EAAWhD,YAAa1K,GAczD,OAXI2Q,IAAqBI,IACvBlN,EAAI6J,EAAWI,cAA+B9N,EAAM2Q,GACpDG,EAAOhD,cAAgBJ,EAAWI,cAClC+C,EACEA,GACCtP,EAAgBuM,eACfiD,IAA2BJ,GAGjCE,GAAgBD,GAAgBlC,EAAUC,MAAMnM,KAAKsO,GAE9CD,EAAeC,EAAS,IAG3BZ,EAAwB,SAAClQ,EAAWP,GAAZ,OAC5BoE,EACE6J,EAAWhD,YACX1K,EACAmR,GACE1R,EACAmC,EAAIqM,EAAgBjO,EAAM,IAC1B4B,EAAI8L,EAAWhD,YAAa1K,EAAM,MAGtCiQ,GAAgBvC,EAAWhD,YAAa1K,IAGpCoR,EAAmB,uCAAG,WAC1B9B,EACAtP,EACA8H,EACAmC,EACAoH,GAL0B,mBAAA/F,EAAA,sDAWpBgG,EAAqB1P,EAAI8L,EAAWnK,OAAQvD,GAC5CuR,EACJhQ,EAAgBuG,SAAW4F,EAAW5F,UAAYA,EAEhD5F,EAAMsP,YAAcvH,GACtBuD,EACEA,GAAsBwB,EAASoB,EAAclO,EAAMsP,aAClCxR,EAAMiK,IAEzBkF,aAAaX,GACbvE,EACIpG,EAAI6J,EAAWnK,OAAQvD,EAAMiK,GAC7B/C,GAAMwG,EAAWnK,OAAQvD,KAI3BiK,EAAStE,EAAU2L,EAAoBrH,IAASqH,IAC/CvP,EAAcsP,KACfE,GACDjC,IAEKmC,EAAgB,6CACjBJ,GACCE,EAAoB,CAAEzJ,WAAY,IAAE,CACxCvE,OAAQmK,EAAWnK,OACnBvD,SAGF0N,EAAa,OAAH,wBACLA,GACA+D,GAGL/C,EAAUC,MAAMnM,KAAKiP,IAGvBhD,EAAezO,KAEXuB,EAAgBqM,eAAiBa,EAAezO,KAClD0O,EAAUC,MAAMnM,KAAK,CACnBoL,cAAc,IAEhBa,EAAiB,IArDO,2CAAH,8DAyDnBe,GAAc,uCAAG,WAAOxP,GAAP,SAAAsL,EAAA,0DACrBmC,EAAS8B,SADY,gCAEX9B,EAAS8B,SACb,iBAAKrB,GACLT,EAASiE,QACTC,GACE3R,GAAQ6C,EAAO2G,MACfH,EACAoE,EAASnE,aACTmE,EAASlE,4BATI,8CAYhB,GAZgB,iFAAH,sDAcdqI,GAA2B,uCAAG,WAAO7R,GAAP,yBAAAuL,EAAA,sEACTkE,KADS,OAGlC,GAHkC,SAC1BjM,EAD0B,EAC1BA,OAEJxD,EAAO,eACUA,GADV,IACT,2BAAW,EAAe,SAClB,EAAQ6B,EAAI2B,EAAQ,IAEtBM,EAAI6J,EAAWnK,OAAQ,EAAM,GAC7B2D,GAAMwG,EAAWnK,OAAQ,GALtB,oCAQTmK,EAAWnK,OAASA,EAXY,yBAc3BA,GAd2B,2CAAH,sDAiB3BkM,GAAwB,uCAAG,WAC/BlL,EACAsN,GAF+B,qCAAAvG,EAAA,sDAG/BoG,EAH+B,+BAGrB,CACRI,OAAO,GAJsB,OAAAxG,EAAA,KAOZ/G,GAPY,iDAOpB,EAPoB,aAQvBE,EAAQF,EAAO,IARQ,oBAWrBwN,EAAiBtN,EAAMC,GACvBgM,EAAa5O,EAAK2C,EAAO,OAE3BsN,EAduB,kCAeAC,GACvBvN,EACA7C,EAAIsM,EAAa6D,EAAe/R,MAChC+O,EACAtB,EAASlE,2BAnBc,aAenB0I,EAfmB,QAsBVF,EAAe/R,MAtBL,oBAuBvB0R,EAAQI,OAAQ,GAEZD,EAzBmB,qDA8BpBA,IACHI,EAAWF,EAAe/R,MACtB6D,EACE6J,EAAWnK,OACXwO,EAAe/R,KACfiS,EAAWF,EAAe/R,OAE5BkH,GAAMwG,EAAWnK,OAAQwO,EAAe/R,OArCrB,gBAyC3B0Q,GAzC2B,uCA0ClBjB,GACLiB,EACAmB,EACAH,GA7CuB,wDAkDxBA,EAAQI,OAlDgB,4CAAH,wDAqDxBI,GAAmB,+BACJrP,EAAOyL,SADH,IACvB,2BAAmC,KAAxB,EAAwB,QAC3B7J,EAAe7C,EAAIyH,EAAS,GAElC5E,IACGA,EAAMC,GAAGG,KACNJ,EAAMC,GAAGG,KAAK+D,OAAM,SAACjE,GAAD,OAAUwN,GAAKxN,OAClCwN,GAAK1N,EAAMC,GAAGC,OACnByN,GAAW,IARQ,8BAWvBvP,EAAOyL,QAAU,IAAIlJ,KAGjB+K,GAAwB,SAACnQ,EAAMT,GAAP,OAC5BS,GAAQT,GAAQsE,EAAIqK,EAAalO,EAAMT,IACtCoG,EAAU0M,KAAapE,IAGpBqE,GAAyC,SAC7CvS,EACAY,EACAoC,GAEA,IAAM+M,EAAc,OAAH,UACX1B,EAAY5E,MACZ0E,EACAjN,EAAYN,GACZsN,EACAjL,EAASjD,GAAT,eACGA,EAAQY,GACXA,GAGN,OAAOiC,EAAoB7C,EAAO8C,EAAQiN,EAAa/M,IAGnDwP,GAAiB,SAACvS,GAAD,OACrB4B,EACEwM,EAAY5E,MAAQ0E,EAAcD,EAClCjO,EACAkC,EAAMiM,iBAAmBvM,EAAIqM,EAAgBjO,EAAM,IAAM,KAGvDwQ,GAAgB,SACpBxQ,EACAP,GAC4B,IAA5BuI,EAA4B,uDAAF,GAEpBvD,EAAe7C,EAAIyH,EAASrJ,GAC9B0Q,EAAsBjR,EAE1B,GAAIgF,EAAO,CACT,IAAMsN,EAAiBtN,EAAMC,GAEzBqN,IACFlO,EAAIqK,EAAalO,EAAMoJ,GAAgB3J,EAAOsS,IAE9CrB,EACE8B,IAASxL,GAAc+K,EAAepN,MAAQhF,EAAkBF,GAC5D,GACAA,EAEFoJ,GAAYkJ,EAAepN,OAAS3B,EAAS0N,GAC/CqB,EAAepN,IAAImE,MAAQ4H,EAClB1H,GAAiB+I,EAAepN,KACzC,YAAIoN,EAAepN,IAAIqD,SAAShJ,SAC9B,SAACyT,GAAD,OACGA,EAAUC,SACThC,EACAvK,SAASsM,EAAUhT,UAEhBsS,EAAelN,KACpBgC,EAAgBkL,EAAepN,KACjCoN,EAAelN,KAAK/F,OAAS,EACzBiT,EAAelN,KAAK7F,SAClB,SAAC2T,GAAD,OACGA,EAAYxK,QAAUvI,MAAMC,QAAQ6Q,KAC9BA,EAAkB1O,MACnB,SAACzC,GAAD,OAAkBA,IAASoT,EAAYlT,SAEzCiR,IAAeiC,EAAYlT,SAElCsS,EAAelN,KAAK,GAAGsD,UAAYuI,EAExCqB,EAAelN,KAAK7F,SAClB,SAAC4T,GAAD,OACGA,EAASzK,QAAUyK,EAASnT,QAAUiR,KAI7CqB,EAAepN,IAAIlF,MAAQiR,IAKhC1I,EAAQ6K,aAAe7K,EAAQ8K,cAC9BrC,EAAoBzQ,EAAM0Q,EAAY1I,EAAQ8K,aAEhD9K,EAAQ+K,gBAAkBC,GAAQhT,IAG9BiT,GAAY,SAAZA,EAKJjT,EACAP,EACAuI,GAEA,IAAK,IAAMkL,KAAYzT,EAAO,CAC5B,IAAMiR,EAAajR,EAAMyT,GACnB9P,EAAY,GAAH,OAAMpD,EAAN,YAAckT,GACvBzO,EAAQ7C,EAAIyH,EAASjG,IAE1BP,EAAO0L,MAAMxJ,IAAI/E,IACf8F,EAAY4K,MACZjM,GAAUA,EAAMC,KAClB5E,EAAa4Q,GAEVF,GAAcpN,EAAWsN,EAAY1I,GADrCiL,EAAU7P,EAAWsN,EAAY1I,KAKnCmL,GAA0C,SAC9CnT,EACAP,GACY,IAAZuI,EAAY,uDAAF,GAEJvD,EAAQ7C,EAAIyH,EAASrJ,GACrBoT,EAAevQ,EAAO0L,MAAMxJ,IAAI/E,GAEtC6D,EAAIqK,EAAalO,EAAMP,GAEnB2T,GACF1E,EAAUH,MAAM/L,KAAK,CACnBxC,OACAiI,OAAQiG,KAIP3M,EAAgBoM,SAAWpM,EAAgBmJ,cAC5C1C,EAAQ6K,cAER3C,EAAsBlQ,EAAMP,GAE5BiP,EAAUC,MAAMnM,KAAK,CACnBxC,OACA0K,YAAagD,EAAWhD,YACxBiD,QAASwC,GAAUnQ,EAAMP,QAI7BgF,GAAUA,EAAMC,IAAO/E,EAAkBF,GAErC+Q,GAAcxQ,EAAMP,EAAOuI,GAD3BiL,GAAUjT,EAAMP,EAAOuI,GAI7BqL,EAAUrT,EAAM6C,IAAW6L,EAAUC,MAAMnM,KAAK,IAChDkM,EAAUzL,MAAMT,KAAK,CACnBxC,UAIEsT,GAAY,uCAAkB,WAAOC,GAAP,2CAAAjI,EAAA,yDAC5B3M,EAAS4U,EAAM5U,OACjBqB,EAAOrB,EAAOqB,OACZyE,EAAe7C,EAAIyH,EAASrJ,IAHA,oBAQ1B0Q,EAAa/R,EAAOW,KAAOqJ,GAAclE,EAAMC,IAAM/F,EAAOc,MAC5DqF,EAAcyO,EAAMjU,OAAS4B,EAC7BsS,GACFC,GAAchP,EAAMC,MACnB+I,EAAS8B,WACT3N,EAAI8L,EAAWnK,OAAQvD,KACvByE,EAAMC,GAAGgP,MACZC,GACE7O,EACAlD,EAAI8L,EAAWI,cAAe9N,GAC9B0N,EAAW5C,YACXgE,EACAF,GAEEgF,EAAUP,EAAUrT,EAAM6C,EAAQiC,GAEpCA,EACFL,EAAMC,GAAGmP,QAAUpP,EAAMC,GAAGmP,OAAON,GAC1B9O,EAAMC,GAAGoP,UAClBrP,EAAMC,GAAGoP,SAASP,GAGpB1P,EAAIqK,EAAalO,EAAM0Q,GAEjBW,EAAaZ,EACjBzQ,EACA0Q,EACA5L,GACA,GAGI8L,GAAgB7O,EAAcsP,IAAeuC,GAElD9O,GACC4J,EAAUzL,MAAMT,KAAK,CACnBxC,OACAV,KAAMiU,EAAMjU,QAGZkU,EA/C4B,0CAiD5B5C,GACAlC,EAAUC,MAAMnM,KAAI,eAAGxC,QAAU4T,EAAU,GAAKvC,KAlDpB,YAsD/BvM,GAAe8O,GAAWlF,EAAUC,MAAMnM,KAAK,IAEhDiM,EAAezO,IAAQyO,EAAezO,GAAQ,GAE9CuB,EAAgBqM,cACdc,EAAUC,MAAMnM,KAAK,CACnBoL,cAAc,KAGdH,EAAS8B,SA/DmB,kCAgELC,GAAe,CAACxP,IAhEX,iBAgEtBuD,EAhEsB,EAgEtBA,OACFwQ,EAA4B/J,GAChC0D,EAAWnK,OACX8F,EACArJ,GAEIgU,EAAoBhK,GACxBzG,EACA8F,EACA0K,EAA0B/T,MAAQA,GAGpC,EAAQgU,EAAkB/J,MAC1BjK,EAAOgU,EAAkBhU,KAEzB8H,EAAU/F,EAAcwB,GA/EM,yCAkFtByO,GACJvN,EACA7C,EAAIsM,EAAalO,GACjB+O,EACAtB,EAASlE,2BAtFiB,oBAwF5BvJ,EAPF,EAjF8B,uBA0FdqP,GAAa,GA1FC,QA0F9BvH,EA1F8B,eA6FhCrD,EAAMC,GAAGgP,MAAQV,GAAQvO,EAAMC,GAAGgP,MAElCtC,GAAoB,EAAOpR,EAAM8H,EAAS,EAAOuJ,GA/FjB,4CAAlB,sDAmGZ2B,GAAO,uCAAiC,WAAOhT,GAAP,mCAAAsL,EAAA,yDAAatD,EAAb,+BAAuB,GAG7DiM,EAAaC,EAAsBlU,GAEzC0O,EAAUC,MAAMnM,KAAK,CACnBoL,cAAc,KAGZH,EAAS8B,SAT+B,iCAUrBqC,GACnB3Q,EAAYjB,GAAQA,EAAOiU,GAXa,OAUpC1Q,EAVoC,OAc1CuE,EAAU/F,EAAcwB,GACxB4J,EAAmBnN,GACdiU,EAAWhU,MAAK,SAACD,GAAD,OAAU4B,EAAI2B,EAAQvD,MACvC8H,EAjBsC,4BAkBjC9H,EAlBiC,kCAoBlCmU,QAAQC,IACZH,EAAW9Q,IAAX,uCAAe,WAAOC,GAAP,eAAAkI,EAAA,6DACP7G,EAAQ7C,EAAIyH,EAASjG,GADd,SAEAqM,GACXhL,GAASA,EAAMC,GAAf,eAAuBtB,EAAYqB,GAAUA,GAHlC,mFAAf,wDArBsC,UAmB1C0I,EAnB0C,OA4BxCvE,MAAMtI,WACgBoN,EAAW5F,UAAYuH,IA7BL,yCA+BPI,GAAyBpG,GA/BlB,QA+B1C8D,EAAmBrF,EA/BuB,sBAkC5C4G,EAAUC,MAAMnM,KAAI,8CACbQ,EAAShD,IACbuB,EAAgBuG,SAAWA,IAAY4F,EAAW5F,QAC/C,GACA,CAAE9H,SACFyN,EAAS8B,SAAW,CAAEzH,WAAY,IAAE,CACxCvE,OAAQmK,EAAWnK,OACnBqK,cAAc,KAGhB5F,EAAQqM,cACLlH,GACD7I,EACE+E,GACA,SAACpK,GAAD,OAAS2C,EAAI8L,EAAWnK,OAAQtE,KAChCe,EAAOiU,EAAapR,EAAO2G,OAjDa,kBAoDrC2D,GApDqC,4CAAjC,sDAuDPkF,GAA4C,SAChD4B,GAIA,IAAMhM,EAAS,OAAH,wBACPgG,GACCG,EAAY5E,MAAQ0E,EAAc,IAGxC,OAAOjN,EAAYgT,GACfhM,EACAjF,EAASiR,GACTrS,EAAIqG,EAAQgM,GACZA,EAAW9Q,KAAI,SAACnD,GAAD,OAAU4B,EAAIqG,EAAQjI,OAGrCsU,GAAgD,SAACtU,GACrDA,EACIkU,EAAsBlU,GAAMhB,SAAQ,SAACuV,GAAD,OAClCrN,GAAMwG,EAAWnK,OAAQgR,MAE1B7G,EAAWnK,OAAS,GAEzBmL,EAAUC,MAAMnM,KAAK,CACnBe,OAAQmK,EAAWnK,OACnBuE,SAAS,KAIP0M,GAA0C,SAACxU,EAAMiK,EAAOjC,GAC5D,IAAMrD,GAAQ/C,EAAIyH,EAASrJ,EAAM,CAAE0E,GAAI,KAAgBA,IAAM,IAAIC,IAEjEd,EAAI6J,EAAWnK,OAAQvD,EAAI,+BACtBiK,GAAK,CACRtF,SAGF+J,EAAUC,MAAMnM,KAAK,CACnBxC,OACAuD,OAAQmK,EAAWnK,OACnBuE,SAAS,IAGXE,GAAWA,EAAQqM,aAAe1P,GAAOA,EAAIC,OAASD,EAAIC,SAGtD3B,GAAoC,SACxCjD,EAIAW,GALwC,OAOxC0E,EAAWrF,GACP0O,EAAUzL,MAAMV,UAAU,CACxBC,KAAM,SAACiS,GAAD,OACJzU,EACEsS,QACE9R,EACAG,GAEF8T,MAGNnC,GACEtS,EACAW,GACA,IAGFyR,GAA8C,SAACpS,GAAkB,MAAZgI,EAAY,uDAAF,GAAE,cAC7ChI,EAAOkU,EAAsBlU,GAAQ6C,EAAO2G,OADC,IACrE,2BAA2E,KAAhEpG,EAAgE,QACzEP,EAAO2G,MAAMkL,OAAOtR,GACpBP,EAAO0L,MAAMmG,OAAOtR,GAEhBxB,EAAIyH,EAASjG,KACV4E,EAAQ2M,YACXzN,GAAMmC,EAASjG,GACf8D,GAAMgH,EAAa9K,KAGpB4E,EAAQ4M,WAAa1N,GAAMwG,EAAWnK,OAAQH,IAC9C4E,EAAQ6M,WAAa3N,GAAMwG,EAAWhD,YAAatH,IACnD4E,EAAQ8M,aAAe5N,GAAMwG,EAAWI,cAAe1K,IACvDqK,EAASU,mBACPnG,EAAQ+M,kBACT7N,GAAM+G,EAAgB7K,KAhByC,8BAoBrEsL,EAAUzL,MAAMT,KAAK,IAErBkM,EAAUC,MAAMnM,KAAI,+BACfkL,GACE1F,EAAQ6M,UAAiB,CAAElH,QAASwC,MAAhB,MAG1BnI,EAAQgN,aAAe3F,KAGpB4F,GAA0C,SAA1CA,EAA2CjV,GAAkB,IAAZgI,EAAY,uDAAF,GACzDvD,EAAQ7C,EAAIyH,EAASrJ,GA2B3B,OAzBA6D,EAAIwF,EAASrJ,EAAM,CACjB0E,GAAI,OAAF,sCACID,GAASA,EAAMC,GAAKD,EAAMC,GAAK,CAAEC,IAAK,CAAE3E,UAAQ,CACpDA,OACAwJ,OAAO,IACJxB,KAGPnF,EAAO2G,MAAMtG,IAAIlD,IAEhBiB,EAAY+G,EAAQvI,SAClBuI,EAAQ3F,UACTwB,EAAIqK,EAAalO,EAAM4B,EAAIsM,EAAalO,EAAMgI,EAAQvI,QAExDgF,EACImD,EAAUI,EAAQ3F,WAClBwB,EACEqK,EACAlO,EACAgI,EAAQ3F,cACJ7B,EACAoB,EAAIsM,EAAalO,EAAM2I,GAAclE,EAAMC,MAEjD2L,EAAoBrQ,GAAM,GAEvBsN,GACF,CAAEtN,KAAMA,G,6BAEPA,QACI4H,EAAUI,EAAQ3F,UAClB,CAAEA,SAAU2F,EAAQ3F,UACpB,IAAE,CACNyR,SAAUR,GACVO,OAAQP,GACR3O,IAAK,SAAF,oGAAE,WAACA,GACJ,GAAIA,EAAK,CACPsQ,EAASjV,EAAMgI,GACf,IAAI,EAAepG,EAAIyH,EAASrJ,GAC1BkV,EAAWjU,EAAY0D,EAAIlF,QAC7BkF,EAAIwQ,kBACDxQ,EAAIwQ,iBAAiB,yBAAyB,IAGjDxQ,EAEEiH,EAAoBwJ,GAA0BF,GAEpD,GACEA,IAAa,EAAMxQ,GAAGC,KACrBiH,GACC9K,EAAQ,EAAM4D,GAAGG,MAAQ,IAAI7C,MAC3B,SAACkG,GAAD,OAAYA,IAAWgN,KAG3B,OAGF,EAAQ,CACNxQ,GAAIkH,E,+BAEK,EAAMlH,IAAE,CACXG,KAAM,GAAF,mBACC/D,EAAQ,EAAM4D,GAAGG,MAAQ,IAAIzG,OAAO+T,KADrC,CAEF+C,IAEFvQ,IAAK,CAAErF,KAAM4V,EAAS5V,KAAMU,UAAM,+BAG/B,EAAM0E,IAAE,CACXC,IAAKuQ,KAIbrR,EAAIwF,EAASrJ,EAAM,KAEjBgI,IAAYA,EAAQ3F,WACpBgO,EAAoBrQ,GAAM,EAAOkV,OAC9B,CACL,IAAM,EAAetT,EAAIyH,EAASrJ,EAAM,IAClCmO,EACJV,EAASU,kBAAoBnG,EAAQmG,iBAEnC,EAAMzJ,KACR,EAAMA,GAAG8E,OAAQ,GAGnB2E,KAEIkH,EAAmBxS,EAAO0L,MAAOvO,KAASoO,EAAYC,SAExDxL,EAAOyL,QAAQpL,IAAIlD,UAM3BsV,GACJ,SAACC,EAASC,GAAV,8CAAwB,WAAOC,GAAP,uBAAAnK,EAAA,yDAClBmK,IACFA,EAAEC,gBAAkBD,EAAEC,iBACtBD,EAAEE,SAAWF,EAAEE,WAEbC,GAAoB,EACpB9F,EAAmBrC,EAASU,iBAC5BhJ,EAAY+I,G,iBACPA,GAETQ,EAAUC,MAAMnM,KAAK,CACnBuL,cAAc,IAXM,UAehBN,EAAS8B,SAfO,iCAgBeC,KAhBf,gBAgBVjM,EAhBU,EAgBVA,OAAQ0E,EAhBE,EAgBFA,OAChByF,EAAWnK,OAASA,EACpBuM,EAAc7H,EAlBI,yCAoBZwH,GAAyBpG,GApBb,YAwBlBtH,EAAc2L,EAAWnK,UACzBtF,OAAOD,KAAK0P,EAAWnK,QAAQqF,OAAM,SAAC5I,GAAD,OAAU4B,EAAIkO,EAAa9P,MAzB9C,wBA2BlB0O,EAAUC,MAAMnM,KAAK,CACnBe,OAAQ,GACRwK,cAAc,IA7BE,UA+BZwH,EAAQzF,EAAa2F,GA/BT,wCAiClBD,GAjCkB,uCAiCEA,EAAU9H,EAAWnK,OAAQkS,GAjC/B,QAkClBhI,EAASJ,kBACP/I,EACE+E,GACA,SAACpK,GAAD,OAAS2C,EAAI8L,EAAWnK,OAAQtE,KAChC4D,EAAO2G,OAtCO,gEA0CpBoM,GAAoB,EA1CA,8BA6CpBlI,EAAW5C,aAAc,EACzB4D,EAAUC,MAAMnM,KAAK,CACnBsI,aAAa,EACbiD,cAAc,EACdC,mBACEjM,EAAc2L,EAAWnK,SAAWqS,EACtC/H,YAAaH,EAAWG,YAAc,EACtCtK,OAAQmK,EAAWnK,SApDD,6EAAxB,uDAyDIsS,GAA8C,SAAC7V,GAAkB,IAAZgI,EAAY,uDAAF,GAC/D/G,EAAY+G,EAAQrH,cACtBwS,GAASnT,EAAM4B,EAAIqM,EAAgBjO,KAEnCmT,GAASnT,EAAMgI,EAAQrH,cACvBkD,EAAIoK,EAAgBjO,EAAMgI,EAAQrH,eAG/BqH,EAAQ8M,aACX5N,GAAMwG,EAAWI,cAAe9N,GAG7BgI,EAAQ6M,YACX3N,GAAMwG,EAAWhD,YAAa1K,GAC9B0N,EAAWC,QAAU3F,EAAQrH,aACzBwP,GAAUnQ,EAAM4B,EAAIqM,EAAgBjO,IACpCmQ,MAGDnI,EAAQ4M,YACX1N,GAAMwG,EAAWnK,OAAQvD,GACzBuB,EAAgBuG,SAAWuH,KAG7BX,EAAUC,MAAMnM,KAAI,iBAAMkL,KAGtBoI,GAAoC,SACxChT,GACqB,IAArBiT,EAAqB,uDAAF,GAEbC,EAAgBlT,GAAcmL,EAC9BgI,EAAqB9Q,EAAY6Q,GACjC/N,EAAUlG,EAAce,GAE1BmL,EADAgI,EAOJ,GAJKF,EAAiBG,oBACpBjI,EAAiB+H,IAGdD,EAAiBI,WAAY,CAChC,GAAI3D,GAAO,qBACU3P,EAAO2G,OADjB,IACT,2BAAiC,KAAtB,EAAsB,QACzB/E,EAAQ7C,EAAIyH,EAAS,GAC3B,GAAI5E,GAASA,EAAMC,GAAI,CACrB,IAAMqN,EAAiBnS,MAAMC,QAAQ4E,EAAMC,GAAGG,MAC1CJ,EAAMC,GAAGG,KAAK,GACdJ,EAAMC,GAAGC,IAEb,IACEqC,GAAc+K,IACZA,EAAeqE,QAAQ,QAASN,QAClC,MACA,aAZG,+BAiBX5H,EAAchM,EAAMiM,iBAChB4H,EAAiBG,kBACf/Q,EAAY8I,GACZ,GACFgI,EACJ5M,EAAU,GAEVqF,EAAUzL,MAAMT,KAAK,CACnByF,WAGFyG,EAAUH,MAAM/L,KAAK,CACnByF,WAIJpF,EAAS,CACP2G,MAAO,IAAIpE,IACXkJ,QAAS,IAAIlJ,IACbmJ,MAAO,IAAInJ,IACXnC,MAAO,IAAImC,IACX/B,UAAU,EACVuB,MAAO,IAGT8J,EAAUC,MAAMnM,KAAK,CACnBqL,YAAakI,EAAiBM,gBAC1B3I,EAAWG,YACX,EACJF,QAASoI,EAAiBlB,UACtBnH,EAAWC,UACXoI,EAAiBG,oBAChBvQ,EAAU7C,EAAYmL,GAE3BnD,cAAaiL,EAAiBO,iBAC1B5I,EAAW5C,YAEfJ,YAAaqL,EAAiBlB,UAC1BnH,EAAWhD,YACTqL,EAAiBG,mBAAqBpT,EACpC7E,OAAOsY,QAAQzT,GAAY9B,QACzB,SAAC0H,EAAD,0BAAYzJ,EAAZ,KAAiBQ,EAAjB,YAAuB,+BAClBiJ,GADkB,eAEpBzJ,EAAMQ,IAAUmC,EAAIqM,EAAgBhP,OAEvC,IAEF,GACR6O,cAAeiI,EAAiBjB,YAC5BpH,EAAWI,cACV,GACLvK,OAAQwS,EAAiBS,WACrB9I,EAAWnK,OACV,GACLwK,cAAc,EACdC,oBAAoB,IAGtBI,EAAY5E,OACTjI,EAAgBuG,WAAaiO,EAAiBf,YACjD5G,EAAYnL,QAAUf,EAAMiM,kBAGxBsI,GAA0C,SAACzW,GAC/C,IAAMyE,EAAQ7C,EAAIyH,EAASrJ,GAAM0E,IAChCD,EAAME,IAAIC,MAAQH,EAAME,IAAMF,EAAMI,KAAK,IAAID,SAGhD,MAAO,CACL8R,QAAS,CACPzB,YACA7C,cACA5C,kBACA8C,aACAnC,aACAd,eACA6C,oBACAxC,oBACA6C,kBACA7D,YACAnN,kBACI8H,cACF,OAAOA,GAELA,YAAQ5J,GACV4J,EAAU5J,GAERyO,kBACF,OAAOA,GAELA,gBAAYzO,GACdyO,EAAczO,GAEZ2O,kBACF,OAAOA,GAELA,gBAAY3O,GACd2O,EAAc3O,GAEZwO,qBACF,OAAOA,GAELA,mBAAexO,GACjBwO,EAAiBxO,GAEfoD,aACF,OAAOA,GAELA,WAAOpD,GACToD,EAASpD,GAEPiO,iBACF,OAAOA,GAELA,eAAWjO,GACbiO,EAAajO,GAEXgO,eACF,OAAOA,GAELA,aAAShO,GACXgO,EAAW,OAAH,wBACHA,GACAhO,KAITuT,WACAiC,YACAK,gBACArS,SACAkQ,YACAd,aACAyD,SACAD,cACAvB,eACAlC,cACAoC,YACAiC,a,SC/rCYE,KAIkC,IAAhDzU,EAAgD,uDAAF,GAExC0U,EAAe,WAGrB,EAAqC,WAAwC,CAC3EjJ,SAAS,EACTC,cAAc,EACdlD,YAAa,GACbI,aAAa,EACb+C,YAAa,EACbC,cAAe,GACfC,cAAc,EACdC,oBAAoB,EACpBlG,SAAS,EACTvE,OAAQ,KAVV,mBAAOjC,EAAP,KAAkBuV,EAAlB,KAaID,EAAa1W,QACf0W,EAAa1W,QAAQwW,QAAQjJ,SAAWvL,EAExC0U,EAAa1W,QAAO,+BACfqN,GAAkBrL,IAAM,CAC3BZ,cAIJ,IAAMoV,EAAUE,EAAa1W,QAAQwW,QAiCrC,OA/BAzU,EAAa,CACXK,QAASoU,EAAQhI,UAAUC,MAC3BlM,SAAU,SAAChD,GACLqX,EAAsBrX,EAAOiX,EAAQnV,iBAAiB,KACxDmV,EAAQhJ,WAAU,+BACbgJ,EAAQhJ,YACRjO,GAGLoX,EAAgB,OAAD,UAAMH,EAAQhJ,iBAKnC,aAAgB,WACTgJ,EAAQtI,YAAY5E,QACvBkN,EAAQnV,gBAAgBuG,SAAW4O,EAAQrH,eAC3CqH,EAAQtI,YAAY5E,OAAQ,GAE1BkN,EAAQtI,YAAYnL,QACtByT,EAAQtI,YAAYnL,OAAQ,EAC5ByT,EAAQhI,UAAUC,MAAMnM,KAAK,KAE/BkU,EAAQxE,sBAGV0E,EAAa1W,QAAQoB,UAAYyV,EAC/BzV,EACAoV,EAAQnV,iBAGHqV,EAAa1W","file":"static/js/0.edb6608b.chunk.js","sourcesContent":["import defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","export default (data: unknown) => data instanceof Date;\n","export default (value: unknown): value is null | undefined => value == null;\n","import isDateObject from './isDateObject';\nimport isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !isDateObject(value);\n","import { InternalFieldName } from '../types';\n\nimport getNodeParentName from './getNodeParentName';\n\nexport default (names: Set<InternalFieldName>, name: InternalFieldName) =>\n  [...names].some((current) => getNodeParentName(name) === current);\n","export default (name: string) => name.substring(0, name.search(/.\\d/)) || name;\n","export default (value: any[]) => value.filter(Boolean);\n","export default (val: unknown): val is undefined => val === undefined;\n","import compact from './compact';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\n\nexport default <T>(obj: T, path: string, defaultValue?: unknown) => {\n  if (isObject(obj) && path) {\n    const result = compact(path.split(/[,[\\].]+?/)).reduce(\n      (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n      obj,\n    );\n\n    return isUndefined(result) || result === obj\n      ? isUndefined(obj[path as keyof T])\n        ? defaultValue\n        : obj[path as keyof T]\n      : result;\n  }\n\n  return undefined;\n};\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","export default <Key extends string, T extends Record<Key, any>>(\n  source: T,\n  key: Key,\n): Omit<T, Key> => {\n  const copy = { ...source };\n  delete copy[key];\n\n  return copy;\n};\n","import { VALIDATION_MODE } from '../constants';\nimport { FormState, FormStateProxy, ReadFormState } from '../types';\n\nexport default <TFieldValues>(\n  formState: FormState<TFieldValues>,\n  _proxyFormState: ReadFormState,\n  localProxyFormState?: ReadFormState,\n  isRoot = true,\n) => {\n  function createGetter(prop: keyof FormStateProxy) {\n    return () => {\n      if (prop in formState) {\n        if (_proxyFormState[prop] !== VALIDATION_MODE.all) {\n          _proxyFormState[prop] = !isRoot || VALIDATION_MODE.all;\n        }\n        localProxyFormState && (localProxyFormState[prop] = true);\n        return formState[prop];\n      }\n      return undefined;\n    };\n  }\n\n  const result = {} as any as typeof formState;\n  for (const key in formState) {\n    Object.defineProperty(result, key, {\n      get: createGetter(key as keyof FormStateProxy),\n    });\n  }\n\n  return result;\n};\n","import * as React from 'react';\n\nimport omit from './utils/omit';\nimport { FieldValues, FormProviderProps, UseFormReturn } from './types';\n\nconst HookFormContext = React.createContext<UseFormReturn | null>(null);\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues,\n>(): UseFormReturn<TFieldValues> =>\n  React.useContext(HookFormContext) as unknown as UseFormReturn<TFieldValues>;\n\nexport const FormProvider = <\n  TFieldValues extends FieldValues,\n  TContext extends object = object,\n>(\n  props: FormProviderProps<TFieldValues, TContext>,\n) => (\n  <HookFormContext.Provider\n    value={omit(props, 'children') as unknown as UseFormReturn}\n  >\n    {props.children}\n  </HookFormContext.Provider>\n);\n","import { EmptyObject } from '../types';\n\nimport isObject from './isObject';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","import { VALIDATION_MODE } from '../constants';\nimport { ReadFormState } from '../types';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport omit from '../utils/omit';\n\nexport default <T extends Record<string, any>, K extends ReadFormState>(\n  formStateData: T,\n  _proxyFormState: K,\n  isRoot?: boolean,\n) => {\n  const formState = omit(formStateData, 'name');\n\n  return (\n    isEmptyObject(formState) ||\n    Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\n    Object.keys(formState).find(\n      (key) =>\n        _proxyFormState[key as keyof ReadFormState] ===\n        (!isRoot || VALIDATION_MODE.all),\n    )\n  );\n};\n","export default <T>(value: T) => (Array.isArray(value) ? value : [value]);\n","import * as React from 'react';\n\nimport { Subject, Subscription } from './utils/createSubject';\n\ntype Props<T> = {\n  disabled?: boolean;\n  subject: Subject<T>;\n  callback: (value: T) => void;\n};\n\nexport function useSubscribe<T>(props: Props<T>) {\n  const _props = React.useRef(props);\n  _props.current = props;\n\n  React.useEffect(() => {\n    const tearDown = (subscription: Subscription | false) => {\n      if (subscription) {\n        subscription.unsubscribe();\n      }\n    };\n\n    const subscription =\n      !props.disabled &&\n      _props.current.subject.subscribe({\n        next: _props.current.callback,\n      });\n\n    return () => tearDown(subscription);\n  }, [props.disabled]);\n}\n","export default (value: unknown): value is string => typeof value === 'string';\n","import { FieldValues, InternalFieldName, Names } from '../types';\nimport get from '../utils/get';\nimport isString from '../utils/isString';\n\nexport function generateWatchOutput(\n  names: string | string[] | undefined,\n  _names: Names,\n  formValues?: FieldValues,\n  isGlobal?: boolean,\n) {\n  const isArray = Array.isArray(names);\n  if (isString(names)) {\n    isGlobal && _names.watch.add(names as InternalFieldName);\n    return get(formValues, names as InternalFieldName);\n  }\n\n  if (isArray) {\n    return names.map(\n      (fieldName) => (\n        isGlobal && _names.watch.add(fieldName as InternalFieldName),\n        get(formValues, fieldName as InternalFieldName)\n      ),\n    );\n  }\n\n  isGlobal && (_names.watchAll = true);\n  return formValues;\n}\n","import {\n  InternalFieldErrors,\n  InternalFieldName,\n  ValidateResult,\n} from '../types';\n\nexport default (\n  name: InternalFieldName,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","export default (value: string) => /^\\w*$/.test(value);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n","import { FieldValues } from '../types';\n\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport stringToPath from './stringToPath';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import { FieldRefs, InternalFieldName } from '../types';\nimport { get } from '../utils';\nimport isObject from '../utils/isObject';\nimport isUndefined from '../utils/isUndefined';\nimport omit from '../utils/omit';\n\nconst focusFieldBy = (\n  fields: FieldRefs,\n  callback: (name: string) => boolean,\n  fieldsNames?: Set<InternalFieldName> | InternalFieldName[],\n) => {\n  for (const key of fieldsNames || Object.keys(fields)) {\n    const field = get(fields, key);\n\n    if (field) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n\n      if (_f && callback(_f.name)) {\n        if (_f.ref.focus && isUndefined(_f.ref.focus())) {\n          break;\n        } else if (_f.refs) {\n          _f.refs[0].focus();\n          break;\n        }\n      } else if (isObject(current)) {\n        focusFieldBy(current, callback);\n      }\n    }\n  }\n};\n\nexport default focusFieldBy;\n","import { InternalFieldName, Names } from '../types';\n\nexport default (\n  name: InternalFieldName,\n  _names: Names,\n  isBlurEvent?: boolean,\n) =>\n  !isBlurEvent &&\n  (_names.watchAll ||\n    _names.watch.has(name) ||\n    [..._names.watch].some(\n      (watchName) =>\n        name.startsWith(watchName) &&\n        /^\\.\\w+/.test(name.slice(watchName.length)),\n    ));\n","import compact from './compact';\nimport convertToArrayPayload from './convertToArrayPayload';\nimport isUndefined from './isUndefined';\n\nfunction removeAtIndexes<T>(data: T[], indexes: number[]): T[] {\n  let i = 0;\n  const temp = [...data];\n\n  for (const index of indexes) {\n    temp.splice(index - i, 1);\n    i++;\n  }\n\n  return compact(temp).length ? temp : [];\n}\n\nexport default <T>(data: T[], index?: number | number[]): T[] =>\n  isUndefined(index)\n    ? []\n    : removeAtIndexes(\n        data,\n        (convertToArrayPayload(index) as number[]).sort((a, b) => a - b),\n      );\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","import isFunction from './isFunction';\nimport isObject from './isObject';\n\nexport default function cloneObject<T>(data: T): T {\n  let copy: any;\n  const isArray = Array.isArray(data);\n\n  if (data instanceof Date) {\n    copy = new Date(data);\n  } else if (data instanceof Set) {\n    copy = new Set(data);\n  } else if (isArray || isObject(data)) {\n    copy = isArray ? [] : {};\n    for (const key in data) {\n      if (isFunction(data[key])) {\n        copy = data;\n        break;\n      }\n      copy[key] = cloneObject(data[key]);\n    }\n  } else {\n    return data;\n  }\n\n  return copy;\n}\n","import { Noop } from '../types';\n\nexport type Observer<T> = {\n  next: (value: T) => void;\n};\n\nexport type Subscription = {\n  unsubscribe: Noop;\n};\n\nexport type Subject<T> = {\n  readonly observers: Observer<T>[];\n  subscribe: (value: Observer<T>) => Subscription;\n  unsubscribe: Noop;\n} & Observer<T>;\n\nexport default function createSubject<T>(): Subject<T> {\n  let _observers: Observer<T>[] = [];\n\n  const next = (value: T) => {\n    for (const observer of _observers) {\n      observer.next(value);\n    }\n  };\n\n  const subscribe = (observer: Observer<T>): Subscription => {\n    _observers.push(observer);\n    return {\n      unsubscribe: () => {\n        _observers = _observers.filter((o) => o !== observer);\n      },\n    };\n  };\n\n  const unsubscribe = () => {\n    _observers = [];\n  };\n\n  return {\n    get observers() {\n      return _observers;\n    },\n    next,\n    subscribe,\n    unsubscribe,\n  };\n}\n","import { Primitive } from '../types';\n\nimport isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isObject from '../utils/isObject';\n\nimport isDateObject from './isDateObject';\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(object1: any, object2: any) {\n  if (isPrimitive(object1) || isPrimitive(object2)) {\n    return object1 === object2;\n  }\n\n  if (isDateObject(object1) && isDateObject(object2)) {\n    return object1.getTime() === object2.getTime();\n  }\n\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (const key of keys1) {\n    const val1 = object1[key];\n\n    if (!keys2.includes(key)) {\n      return false;\n    }\n\n    if (key !== 'ref') {\n      const val2 = object2[key];\n\n      if (\n        (isDateObject(val1) && isDateObject(val2)) ||\n        (isObject(val1) && isObject(val2)) ||\n        (Array.isArray(val1) && Array.isArray(val2))\n          ? !deepEqual(val1, val2)\n          : val1 !== val2\n      ) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `select-multiple`;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import { FieldElement } from '../types';\n\nimport isCheckBoxInput from './isCheckBoxInput';\nimport isRadioInput from './isRadioInput';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","export default typeof window !== 'undefined' &&\n  typeof window.HTMLElement !== 'undefined' &&\n  typeof document !== 'undefined';\n","import { Ref } from '../types';\n\nimport isHTMLElement from './isHTMLElement';\n\nexport default (ref: Ref) => isHTMLElement(ref) && document.contains(ref);\n","import isBoolean from './isBoolean';\nimport isEmptyObject from './isEmptyObject';\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport stringToPath from './stringToPath';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import isUndefined from '../utils/isUndefined';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean | undefined;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: HTMLInputElement[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.checked && !option.disabled)\n        .map((option) => option.value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    return options[0].checked && !options[0].disabled\n      ? // @ts-expect-error expected to work in the browser\n        options[0].attributes && !isUndefined(options[0].attributes.value)\n        ? isUndefined(options[0].value) || options[0].value === ''\n          ? validResult\n          : { value: options[0].value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import { Field } from '../types';\nimport isUndefined from '../utils/isUndefined';\n\nexport default (\n  value: any,\n  { valueAsNumber, valueAsDate, setValueAs }: Field['_f'],\n) =>\n  isUndefined(value)\n    ? value\n    : valueAsNumber\n    ? value === ''\n      ? NaN\n      : +value\n    : valueAsDate\n    ? new Date(value)\n    : setValueAs\n    ? setValueAs(value)\n    : value;\n","type RadioFieldResult = {\n  isValid: boolean;\n  value: number | string | null;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: null,\n};\n\nexport default (options?: HTMLInputElement[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.checked && !option.disabled\n            ? {\n                isValid: true,\n                value: option.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { Field } from '../types';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isFileInput from '../utils/isFileInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isRadioInput from '../utils/isRadioInput';\nimport isUndefined from '../utils/isUndefined';\n\nimport getCheckboxValue from './getCheckboxValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getRadioValue from './getRadioValue';\n\nexport default function getFieldValue(_f: Field['_f']) {\n  const ref = _f.ref;\n\n  if (_f.refs ? _f.refs.every((ref) => ref.disabled) : ref.disabled) {\n    return;\n  }\n\n  if (isFileInput(ref)) {\n    return ref.files;\n  }\n\n  if (isRadioInput(ref)) {\n    return getRadioValue(_f.refs).value;\n  }\n\n  if (isMultipleSelect(ref)) {\n    return [...ref.selectedOptions].map(({ value }) => value);\n  }\n\n  if (isCheckBox(ref)) {\n    return getCheckboxValue(_f.refs).value;\n  }\n\n  return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\n","import {\n  CriteriaMode,\n  Field,\n  FieldName,\n  FieldRefs,\n  InternalFieldName,\n} from '../types';\nimport { get } from '../utils';\nimport set from '../utils/set';\n\nexport default <TFieldValues>(\n  fieldsNames: Set<InternalFieldName> | InternalFieldName[],\n  _fields: FieldRefs,\n  criteriaMode?: CriteriaMode,\n  shouldUseNativeValidation?: boolean | undefined,\n) => {\n  const fields: Record<InternalFieldName, Field['_f']> = {};\n\n  for (const name of fieldsNames) {\n    const field: Field = get(_fields, name);\n\n    field && set(fields, name, field._f);\n  }\n\n  return {\n    criteriaMode,\n    names: [...fieldsNames] as FieldName<TFieldValues>[],\n    fields,\n    shouldUseNativeValidation,\n  };\n};\n","import { Field } from '../types';\n\nexport default (options: Field['_f']) =>\n  options.mount &&\n  (options.required ||\n    options.min ||\n    options.max ||\n    options.maxLength ||\n    options.minLength ||\n    options.pattern ||\n    options.validate);\n","import { FieldError, FieldErrors, FieldValues } from '../types';\nimport get from '../utils/get';\nimport isKey from '../utils/isKey';\n\nexport default function schemaErrorLookup(\n  errors: FieldErrors,\n  _fields: FieldValues,\n  name: string,\n): {\n  error?: FieldError;\n  name: string;\n} {\n  const error = get(errors, name);\n\n  if (error || isKey(name)) {\n    return {\n      error,\n      name,\n    };\n  }\n\n  const names = name.split('.');\n\n  while (names.length) {\n    const fieldName = names.join('.');\n    const field = get(_fields, fieldName);\n    const foundError = get(errors, fieldName);\n\n    if (field && !Array.isArray(field) && name !== fieldName) {\n      return { name };\n    }\n\n    if (foundError && foundError.type) {\n      return {\n        name: fieldName,\n        error: foundError,\n      };\n    }\n\n    names.pop();\n  }\n\n  return {\n    name,\n  };\n}\n","import isObject from './isObject';\nimport isPrimitive from './isPrimitive';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>,\n>(target: T, source: U): T & U {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    try {\n      target[key] =\n        (isObject(targetValue) && isObject(sourceValue)) ||\n        (Array.isArray(targetValue) && Array.isArray(sourceValue))\n          ? deepMerge(targetValue, sourceValue)\n          : sourceValue;\n    } catch {}\n  }\n\n  return target;\n}\n","import { get } from '../utils';\nimport deepEqual from '../utils/deepEqual';\nimport { deepMerge } from '../utils/deepMerge';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport set from '../utils/set';\n\nfunction setDirtyFields<\n  T extends Record<string, unknown>[],\n  U extends Record<string, unknown>[],\n  K extends Record<string, boolean | []>,\n>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n  parentNode?: K,\n  parentName?: keyof K,\n) {\n  let index = -1;\n\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setDirtyFields(\n          values[index][key] as T,\n          get(defaultValues[index] || {}, key, []),\n          dirtyFields[index][key] as [],\n          dirtyFields[index],\n          key,\n        );\n      } else {\n        !isNullOrUndefined(defaultValues) &&\n        deepEqual(get(defaultValues[index] || {}, key), values[index][key])\n          ? set(dirtyFields[index] || {}, key)\n          : (dirtyFields[index] = {\n              ...dirtyFields[index],\n              [key]: true,\n            });\n      }\n    }\n\n    parentNode &&\n      !dirtyFields.length &&\n      delete parentNode[parentName as keyof K];\n  }\n\n  return dirtyFields;\n}\n\nexport default <T extends U, U extends Record<string, unknown>[]>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n) =>\n  deepMerge(\n    setDirtyFields(values, defaultValues, dirtyFields.slice(0, values.length)),\n    setDirtyFields(defaultValues, values, dirtyFields.slice(0, values.length)),\n  );\n","export default (\n  isBlurEvent: boolean,\n  isTouched: boolean,\n  isSubmitted: boolean,\n  reValidateMode: {\n    isOnBlur: boolean;\n    isOnChange: boolean;\n  },\n  mode: Partial<{\n    isOnSubmit: boolean;\n    isOnBlur: boolean;\n    isOnChange: boolean;\n    isOnTouch: boolean;\n    isOnAll: boolean;\n  }>,\n) => {\n  if (mode.isOnAll) {\n    return false;\n  } else if (!isSubmitted && mode.isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","import compact from '../utils/compact';\nimport get from '../utils/get';\nimport unset from '../utils/unset';\n\nexport default <T>(ref: T, name: string) =>\n  !compact(get(ref, name, [])).length && unset(ref, name);\n","import * as React from 'react';\n\nimport { Message } from '../types';\nimport isString from '../utils/isString';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || React.isValidElement(value as JSX.Element);\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import { FieldError, Ref, ValidateResult } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (\n    isMessage(result) ||\n    (Array.isArray(result) && result.every(isMessage)) ||\n    (isBoolean(result) && !result)\n  ) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import { ValidationRule } from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","import { INPUT_VALIDATION_RULES } from '../constants';\nimport { Field, FieldError, InternalFieldErrors, Message } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isMessage from '../utils/isMessage';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isRadioInput from '../utils/isRadioInput';\nimport isRegex from '../utils/isRegex';\nimport isString from '../utils/isString';\n\nimport appendErrors from './appendErrors';\nimport getCheckboxValue from './getCheckboxValue';\nimport getRadioValue from './getRadioValue';\nimport getValidateError from './getValidateError';\nimport getValueAndMessage from './getValueAndMessage';\n\nexport default async (\n  field: Field,\n  inputValue: any,\n  validateAllFieldCriteria: boolean,\n  shouldUseNativeValidation?: boolean,\n): Promise<InternalFieldErrors> => {\n  const {\n    ref,\n    refs,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n    name,\n    valueAsNumber,\n    mount,\n    disabled,\n  } = field._f;\n  if (!mount || disabled) {\n    return {};\n  }\n  const inputRef: HTMLInputElement = refs ? refs[0] : (ref as HTMLInputElement);\n  const setCustomValidty = (message?: string | boolean) => {\n    if (shouldUseNativeValidation && inputRef.reportValidity) {\n      inputRef.setCustomValidity(isBoolean(message) ? '' : message || ' ');\n      inputRef.reportValidity();\n    }\n  };\n  const error: InternalFieldErrors = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty =\n    ((valueAsNumber || isFileInput(ref)) && !ref.value) ||\n    inputValue === '' ||\n    (Array.isArray(inputValue) && !inputValue.length);\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\n      (isBoolean(inputValue) && !inputValue) ||\n      (isCheckBox && !getCheckboxValue(refs).isValid) ||\n      (isRadio && !getRadioValue(refs).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: inputRef,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(message);\n        return error;\n      }\n    }\n  }\n\n  if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNaN(inputValue)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(inputValue);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(inputValue);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if ((maxLength || minLength) && !isEmpty && isString(inputValue)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      inputValue.length > maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      inputValue.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty && isString(inputValue)) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(message);\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    if (isFunction(validate)) {\n      const result = await validate(inputValue);\n      const validateError = getValidateError(result, inputRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          setCustomValidty(validateError.message);\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n\n      for (const key in validate) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateError = getValidateError(\n          await validate[key](inputValue),\n          inputRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          setCustomValidty(validateError.message);\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: inputRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  setCustomValidty(true);\n  return error;\n};\n","import { EVENTS, VALIDATION_MODE } from '../constants';\nimport {\n  BatchFieldArrayUpdate,\n  ChangeHandler,\n  DeepPartial,\n  DelayCallback,\n  Field,\n  FieldError,\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldPath,\n  FieldRefs,\n  FieldValues,\n  FormState,\n  GetIsDirty,\n  InternalFieldName,\n  Names,\n  Path,\n  Ref,\n  ResolverResult,\n  SetFieldValue,\n  SetValueConfig,\n  Subjects,\n  UnpackNestedValue,\n  UseFormClearErrors,\n  UseFormGetValues,\n  UseFormHandleSubmit,\n  UseFormProps,\n  UseFormRegister,\n  UseFormRegisterReturn,\n  UseFormReset,\n  UseFormResetField,\n  UseFormReturn,\n  UseFormSetError,\n  UseFormSetFocus,\n  UseFormSetValue,\n  UseFormTrigger,\n  UseFormUnregister,\n  UseFormWatch,\n  WatchInternal,\n  WatchObserver,\n} from '../types';\nimport { set } from '../utils';\nimport cloneObject from '../utils/cloneObject';\nimport compact from '../utils/compact';\nimport convertToArrayPayload from '../utils/convertToArrayPayload';\nimport createSubject from '../utils/createSubject';\nimport deepEqual from '../utils/deepEqual';\nimport get from '../utils/get';\nimport getValidationModes from '../utils/getValidationModes';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDateObject from '../utils/isDateObject';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isHTMLElement from '../utils/isHTMLElement';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isPrimitive from '../utils/isPrimitive';\nimport isRadioOrCheckboxFunction from '../utils/isRadioOrCheckbox';\nimport isString from '../utils/isString';\nimport isUndefined from '../utils/isUndefined';\nimport isWeb from '../utils/isWeb';\nimport live from '../utils/live';\nimport omit from '../utils/omit';\nimport unset from '../utils/unset';\n\nimport focusFieldBy from './focusFieldBy';\nimport { generateWatchOutput } from './generateWatchOutput';\nimport getFieldValue from './getFieldValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getResolverOptions from './getResolverOptions';\nimport hasValidation from './hasValidation';\nimport isNameInFieldArray from './isNameInFieldArray';\nimport isWatched from './isWatched';\nimport schemaErrorLookup from './schemaErrorLookup';\nimport setFieldArrayDirtyFields from './setFieldArrayDirtyFields';\nimport skipValidation from './skipValidation';\nimport unsetEmptyArray from './unsetEmptyArray';\nimport validateField from './validateField';\n\nconst defaultOptions = {\n  mode: VALIDATION_MODE.onSubmit,\n  reValidateMode: VALIDATION_MODE.onChange,\n  shouldFocusError: true,\n} as const;\n\nconst isWindowUndefined = typeof window === 'undefined';\n\nexport function createFormControl<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): Omit<UseFormReturn<TFieldValues, TContext>, 'formState'> {\n  let _options = {\n    ...defaultOptions,\n    ...props,\n  };\n  let _formState: FormState<TFieldValues> = {\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {} as FieldErrors<TFieldValues>,\n  };\n  let _fields = {};\n  let _defaultValues = _options.defaultValues || {};\n  let _formValues = _options.shouldUnregister\n    ? {}\n    : cloneObject(_defaultValues);\n  let _stateFlags = {\n    action: false,\n    mount: false,\n    watch: false,\n  };\n  let _names: Names = {\n    mount: new Set(),\n    unMount: new Set(),\n    array: new Set(),\n    watch: new Set(),\n  } as Names;\n  let delayErrorCallback: DelayCallback;\n  let timer = 0;\n  let validateFields: Record<InternalFieldName, number> = {};\n  const _proxyFormState = {\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  };\n  const _subjects: Subjects<TFieldValues> = {\n    watch: createSubject(),\n    array: createSubject(),\n    state: createSubject(),\n  };\n\n  const validationModeBeforeSubmit = getValidationModes(_options.mode);\n  const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\n  const shouldDisplayAllAssociatedErrors =\n    _options.criteriaMode === VALIDATION_MODE.all;\n\n  const debounce =\n    <T extends Function>(callback: T, wait: number) =>\n    (...args: any) => {\n      clearTimeout(timer);\n      timer = window.setTimeout(() => callback(...args), wait);\n    };\n\n  const _updateValid = async (shouldSkipRender?: boolean) => {\n    let isValid = false;\n\n    if (_proxyFormState.isValid) {\n      isValid = _options.resolver\n        ? isEmptyObject((await _executeSchema()).errors)\n        : await executeBuildInValidation(_fields, true);\n\n      if (!shouldSkipRender && isValid !== _formState.isValid) {\n        _formState.isValid = isValid;\n        _subjects.state.next({\n          isValid,\n        });\n      }\n    }\n\n    return isValid;\n  };\n\n  const _updateFieldArray: BatchFieldArrayUpdate = (\n    name,\n    method,\n    args,\n    values = [],\n    shouldSetValues = true,\n    shouldSetFields = true,\n  ) => {\n    _stateFlags.action = true;\n\n    if (shouldSetFields && get(_fields, name)) {\n      const fieldValues = method(get(_fields, name), args.argA, args.argB);\n      shouldSetValues && set(_fields, name, fieldValues);\n    }\n\n    if (Array.isArray(get(_formState.errors, name))) {\n      const errors = method(get(_formState.errors, name), args.argA, args.argB);\n      shouldSetValues && set(_formState.errors, name, errors);\n      unsetEmptyArray(_formState.errors, name);\n    }\n\n    if (_proxyFormState.touchedFields && get(_formState.touchedFields, name)) {\n      const touchedFields = method(\n        get(_formState.touchedFields, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSetValues &&\n        set(_formState.touchedFields as TFieldValues, name, touchedFields);\n      unsetEmptyArray(_formState.touchedFields, name);\n    }\n\n    if (_proxyFormState.dirtyFields || _proxyFormState.isDirty) {\n      updateFieldArrayDirty(name, values);\n    }\n\n    _subjects.state.next({\n      isDirty: _getDirty(name, values),\n      dirtyFields: _formState.dirtyFields,\n      errors: _formState.errors,\n      isValid: _formState.isValid,\n    });\n  };\n\n  const updateErrors = (name: InternalFieldName, error: FieldError) => (\n    set(_formState.errors, name, error),\n    _subjects.state.next({\n      errors: _formState.errors,\n    })\n  );\n\n  const updateValidAndValue = (\n    name: InternalFieldName,\n    shouldSkipSetValueAs?: boolean,\n    ref?: Ref,\n  ) => {\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      const defaultValue = get(_formValues, name, get(_defaultValues, name));\n\n      isUndefined(defaultValue) ||\n      (ref && (ref as HTMLInputElement).defaultChecked) ||\n      shouldSkipSetValueAs\n        ? set(\n            _formValues,\n            name,\n            shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f),\n          )\n        : setFieldValue(name, defaultValue);\n    }\n\n    _stateFlags.mount && _updateValid();\n  };\n\n  const updateTouchAndDirty = (\n    name: InternalFieldName,\n    fieldValue: unknown,\n    isCurrentTouched?: boolean,\n    shouldRender = true,\n  ): Partial<\n    Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touchedFields'>\n  > => {\n    let isFieldDirty = false;\n    const output: Partial<FormState<TFieldValues>> & { name: string } = {\n      name,\n    };\n    const isPreviousFieldTouched = get(_formState.touchedFields, name);\n\n    if (_proxyFormState.isDirty) {\n      const isPreviousFormDirty = _formState.isDirty;\n\n      _formState.isDirty = output.isDirty = _getDirty();\n      isFieldDirty = isPreviousFormDirty !== output.isDirty;\n    }\n\n    if (_proxyFormState.dirtyFields && !isCurrentTouched) {\n      const isPreviousFieldDirty = get(_formState.dirtyFields, name);\n      const isCurrentFieldPristine = deepEqual(\n        get(_defaultValues, name),\n        fieldValue,\n      );\n\n      isCurrentFieldPristine\n        ? unset(_formState.dirtyFields, name)\n        : set(_formState.dirtyFields as TFieldValues, name, true);\n      output.dirtyFields = _formState.dirtyFields;\n      isFieldDirty =\n        isFieldDirty ||\n        isPreviousFieldDirty !== get(_formState.dirtyFields, name);\n    }\n\n    if (isCurrentTouched && !isPreviousFieldTouched) {\n      set(_formState.touchedFields as TFieldValues, name, isCurrentTouched);\n      output.touchedFields = _formState.touchedFields;\n      isFieldDirty =\n        isFieldDirty ||\n        (_proxyFormState.touchedFields &&\n          isPreviousFieldTouched !== isCurrentTouched);\n    }\n\n    isFieldDirty && shouldRender && _subjects.state.next(output);\n\n    return isFieldDirty ? output : {};\n  };\n\n  const updateFieldArrayDirty = (name: any, value: any) => (\n    set(\n      _formState.dirtyFields as TFieldValues,\n      name,\n      setFieldArrayDirtyFields(\n        value,\n        get(_defaultValues, name, []),\n        get(_formState.dirtyFields, name, []),\n      ),\n    ),\n    unsetEmptyArray(_formState.dirtyFields, name)\n  );\n\n  const shouldRenderByError = async (\n    shouldSkipRender: boolean,\n    name: InternalFieldName,\n    isValid: boolean,\n    error?: FieldError,\n    fieldState?: {\n      dirty?: FieldNamesMarkedBoolean<TFieldValues>;\n      isDirty?: boolean;\n      touched?: FieldNamesMarkedBoolean<TFieldValues>;\n    },\n  ): Promise<void> => {\n    const previousFieldError = get(_formState.errors, name);\n    const shouldUpdateValid =\n      _proxyFormState.isValid && _formState.isValid !== isValid;\n\n    if (props.delayError && error) {\n      delayErrorCallback =\n        delayErrorCallback || debounce(updateErrors, props.delayError);\n      delayErrorCallback(name, error);\n    } else {\n      clearTimeout(timer);\n      error\n        ? set(_formState.errors, name, error)\n        : unset(_formState.errors, name);\n    }\n\n    if (\n      ((error ? !deepEqual(previousFieldError, error) : previousFieldError) ||\n        !isEmptyObject(fieldState) ||\n        shouldUpdateValid) &&\n      !shouldSkipRender\n    ) {\n      const updatedFormState = {\n        ...fieldState,\n        ...(shouldUpdateValid ? { isValid } : {}),\n        errors: _formState.errors,\n        name,\n      };\n\n      _formState = {\n        ..._formState,\n        ...updatedFormState,\n      };\n\n      _subjects.state.next(updatedFormState);\n    }\n\n    validateFields[name]--;\n\n    if (_proxyFormState.isValidating && !validateFields[name]) {\n      _subjects.state.next({\n        isValidating: false,\n      });\n      validateFields = {};\n    }\n  };\n\n  const _executeSchema = async (name?: InternalFieldName[]) =>\n    _options.resolver\n      ? await _options.resolver(\n          { ..._formValues } as UnpackNestedValue<TFieldValues>,\n          _options.context,\n          getResolverOptions(\n            name || _names.mount,\n            _fields,\n            _options.criteriaMode,\n            _options.shouldUseNativeValidation,\n          ),\n        )\n      : ({} as ResolverResult<TFieldValues>);\n\n  const executeSchemaAndUpdateState = async (names?: InternalFieldName[]) => {\n    const { errors } = await _executeSchema();\n\n    if (names) {\n      for (const name of names) {\n        const error = get(errors, name);\n        error\n          ? set(_formState.errors, name, error)\n          : unset(_formState.errors, name);\n      }\n    } else {\n      _formState.errors = errors as FieldErrors<TFieldValues>;\n    }\n\n    return errors;\n  };\n\n  const executeBuildInValidation = async (\n    fields: FieldRefs,\n    shouldOnlyCheckValid?: boolean,\n    context = {\n      valid: true,\n    },\n  ) => {\n    for (const name in fields) {\n      const field = fields[name];\n\n      if (field) {\n        const fieldReference = field._f;\n        const fieldValue = omit(field, '_f');\n\n        if (fieldReference) {\n          const fieldError = await validateField(\n            field,\n            get(_formValues, fieldReference.name),\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation,\n          );\n\n          if (fieldError[fieldReference.name]) {\n            context.valid = false;\n\n            if (shouldOnlyCheckValid) {\n              break;\n            }\n          }\n\n          if (!shouldOnlyCheckValid) {\n            fieldError[fieldReference.name]\n              ? set(\n                  _formState.errors,\n                  fieldReference.name,\n                  fieldError[fieldReference.name],\n                )\n              : unset(_formState.errors, fieldReference.name);\n          }\n        }\n\n        fieldValue &&\n          (await executeBuildInValidation(\n            fieldValue,\n            shouldOnlyCheckValid,\n            context,\n          ));\n      }\n    }\n\n    return context.valid;\n  };\n\n  const _removeUnmounted = () => {\n    for (const name of _names.unMount) {\n      const field: Field = get(_fields, name);\n\n      field &&\n        (field._f.refs\n          ? field._f.refs.every((ref) => !live(ref))\n          : !live(field._f.ref)) &&\n        unregister(name as FieldPath<TFieldValues>);\n    }\n\n    _names.unMount = new Set();\n  };\n\n  const _getDirty: GetIsDirty = (name, data) => (\n    name && data && set(_formValues, name, data),\n    !deepEqual(getValues(), _defaultValues)\n  );\n\n  const _getWatch: WatchInternal<TFieldValues> = (\n    names,\n    defaultValue,\n    isGlobal,\n  ) => {\n    const fieldValues = {\n      ...(_stateFlags.mount\n        ? _formValues\n        : isUndefined(defaultValue)\n        ? _defaultValues\n        : isString(names)\n        ? { [names]: defaultValue }\n        : defaultValue),\n    };\n\n    return generateWatchOutput(names, _names, fieldValues, isGlobal);\n  };\n\n  const _getFieldArray = (name: InternalFieldName) =>\n    get(\n      _stateFlags.mount ? _formValues : _defaultValues,\n      name,\n      props.shouldUnregister ? get(_defaultValues, name, []) : [],\n    );\n\n  const setFieldValue = (\n    name: InternalFieldName,\n    value: SetFieldValue<TFieldValues>,\n    options: SetValueConfig = {},\n  ) => {\n    const field: Field = get(_fields, name);\n    let fieldValue: unknown = value;\n\n    if (field) {\n      const fieldReference = field._f;\n\n      if (fieldReference) {\n        set(_formValues, name, getFieldValueAs(value, fieldReference));\n\n        fieldValue =\n          isWeb && isHTMLElement(fieldReference.ref) && isNullOrUndefined(value)\n            ? ''\n            : value;\n\n        if (isFileInput(fieldReference.ref) && !isString(fieldValue)) {\n          fieldReference.ref.files = fieldValue as FileList;\n        } else if (isMultipleSelect(fieldReference.ref)) {\n          [...fieldReference.ref.options].forEach(\n            (selectRef) =>\n              (selectRef.selected = (\n                fieldValue as InternalFieldName[]\n              ).includes(selectRef.value)),\n          );\n        } else if (fieldReference.refs) {\n          if (isCheckBoxInput(fieldReference.ref)) {\n            fieldReference.refs.length > 1\n              ? fieldReference.refs.forEach(\n                  (checkboxRef) =>\n                    (checkboxRef.checked = Array.isArray(fieldValue)\n                      ? !!(fieldValue as []).find(\n                          (data: string) => data === checkboxRef.value,\n                        )\n                      : fieldValue === checkboxRef.value),\n                )\n              : (fieldReference.refs[0].checked = !!fieldValue);\n          } else {\n            fieldReference.refs.forEach(\n              (radioRef: HTMLInputElement) =>\n                (radioRef.checked = radioRef.value === fieldValue),\n            );\n          }\n        } else {\n          fieldReference.ref.value = fieldValue;\n        }\n      }\n    }\n\n    (options.shouldDirty || options.shouldTouch) &&\n      updateTouchAndDirty(name, fieldValue, options.shouldTouch);\n\n    options.shouldValidate && trigger(name as Path<TFieldValues>);\n  };\n\n  const setValues = <\n    T extends InternalFieldName,\n    K extends SetFieldValue<TFieldValues>,\n    U,\n  >(\n    name: T,\n    value: K,\n    options: U,\n  ) => {\n    for (const fieldKey in value) {\n      const fieldValue = value[fieldKey];\n      const fieldName = `${name}.${fieldKey}` as Path<TFieldValues>;\n      const field = get(_fields, fieldName);\n\n      (_names.array.has(name) ||\n        !isPrimitive(fieldValue) ||\n        (field && !field._f)) &&\n      !isDateObject(fieldValue)\n        ? setValues(fieldName, fieldValue, options)\n        : setFieldValue(fieldName, fieldValue, options);\n    }\n  };\n\n  const setValue: UseFormSetValue<TFieldValues> = (\n    name,\n    value,\n    options = {},\n  ) => {\n    const field = get(_fields, name);\n    const isFieldArray = _names.array.has(name);\n\n    set(_formValues, name, value);\n\n    if (isFieldArray) {\n      _subjects.array.next({\n        name,\n        values: _formValues,\n      });\n\n      if (\n        (_proxyFormState.isDirty || _proxyFormState.dirtyFields) &&\n        options.shouldDirty\n      ) {\n        updateFieldArrayDirty(name, value);\n\n        _subjects.state.next({\n          name,\n          dirtyFields: _formState.dirtyFields,\n          isDirty: _getDirty(name, value),\n        });\n      }\n    } else {\n      field && !field._f && !isNullOrUndefined(value)\n        ? setValues(name, value, options)\n        : setFieldValue(name, value, options);\n    }\n\n    isWatched(name, _names) && _subjects.state.next({});\n    _subjects.watch.next({\n      name,\n    });\n  };\n\n  const handleChange: ChangeHandler = async (event) => {\n    const target = event.target;\n    let name = target.name;\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      let error;\n      let isValid;\n      const fieldValue = target.type ? getFieldValue(field._f) : target.value;\n      const isBlurEvent = event.type === EVENTS.BLUR;\n      const shouldSkipValidation =\n        (!hasValidation(field._f) &&\n          !_options.resolver &&\n          !get(_formState.errors, name) &&\n          !field._f.deps) ||\n        skipValidation(\n          isBlurEvent,\n          get(_formState.touchedFields, name),\n          _formState.isSubmitted,\n          validationModeAfterSubmit,\n          validationModeBeforeSubmit,\n        );\n      const watched = isWatched(name, _names, isBlurEvent);\n\n      if (isBlurEvent) {\n        field._f.onBlur && field._f.onBlur(event);\n      } else if (field._f.onChange) {\n        field._f.onChange(event);\n      }\n\n      set(_formValues, name, fieldValue);\n\n      const fieldState = updateTouchAndDirty(\n        name,\n        fieldValue,\n        isBlurEvent,\n        false,\n      );\n\n      const shouldRender = !isEmptyObject(fieldState) || watched;\n\n      !isBlurEvent &&\n        _subjects.watch.next({\n          name,\n          type: event.type,\n        });\n\n      if (shouldSkipValidation) {\n        return (\n          shouldRender &&\n          _subjects.state.next({ name, ...(watched ? {} : fieldState) })\n        );\n      }\n\n      !isBlurEvent && watched && _subjects.state.next({});\n\n      validateFields[name] = validateFields[name] ? +1 : 1;\n\n      _proxyFormState.isValidating &&\n        _subjects.state.next({\n          isValidating: true,\n        });\n\n      if (_options.resolver) {\n        const { errors } = await _executeSchema([name]);\n        const previousErrorLookupResult = schemaErrorLookup(\n          _formState.errors,\n          _fields,\n          name,\n        );\n        const errorLookupResult = schemaErrorLookup(\n          errors,\n          _fields,\n          previousErrorLookupResult.name || name,\n        );\n\n        error = errorLookupResult.error;\n        name = errorLookupResult.name;\n\n        isValid = isEmptyObject(errors);\n      } else {\n        error = (\n          await validateField(\n            field,\n            get(_formValues, name) as Field,\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation,\n          )\n        )[name];\n\n        isValid = await _updateValid(true);\n      }\n\n      field._f.deps && trigger(field._f.deps as FieldPath<TFieldValues>[]);\n\n      shouldRenderByError(false, name, isValid, error, fieldState);\n    }\n  };\n\n  const trigger: UseFormTrigger<TFieldValues> = async (name, options = {}) => {\n    let isValid;\n    let validationResult;\n    const fieldNames = convertToArrayPayload(name) as InternalFieldName[];\n\n    _subjects.state.next({\n      isValidating: true,\n    });\n\n    if (_options.resolver) {\n      const errors = await executeSchemaAndUpdateState(\n        isUndefined(name) ? name : fieldNames,\n      );\n\n      isValid = isEmptyObject(errors);\n      validationResult = name\n        ? !fieldNames.some((name) => get(errors, name))\n        : isValid;\n    } else if (name) {\n      validationResult = (\n        await Promise.all(\n          fieldNames.map(async (fieldName) => {\n            const field = get(_fields, fieldName);\n            return await executeBuildInValidation(\n              field && field._f ? { [fieldName]: field } : field,\n            );\n          }),\n        )\n      ).every(Boolean);\n      !(!validationResult && !_formState.isValid) && _updateValid();\n    } else {\n      validationResult = isValid = await executeBuildInValidation(_fields);\n    }\n\n    _subjects.state.next({\n      ...(!isString(name) ||\n      (_proxyFormState.isValid && isValid !== _formState.isValid)\n        ? {}\n        : { name }),\n      ...(_options.resolver ? { isValid } : {}),\n      errors: _formState.errors,\n      isValidating: false,\n    });\n\n    options.shouldFocus &&\n      !validationResult &&\n      focusFieldBy(\n        _fields,\n        (key) => get(_formState.errors, key),\n        name ? fieldNames : _names.mount,\n      );\n\n    return validationResult;\n  };\n\n  const getValues: UseFormGetValues<TFieldValues> = (\n    fieldNames?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>,\n  ) => {\n    const values = {\n      ..._defaultValues,\n      ...(_stateFlags.mount ? _formValues : {}),\n    };\n\n    return isUndefined(fieldNames)\n      ? values\n      : isString(fieldNames)\n      ? get(values, fieldNames as InternalFieldName)\n      : fieldNames.map((name) => get(values, name as InternalFieldName));\n  };\n\n  const clearErrors: UseFormClearErrors<TFieldValues> = (name) => {\n    name\n      ? convertToArrayPayload(name).forEach((inputName) =>\n          unset(_formState.errors, inputName),\n        )\n      : (_formState.errors = {} as FieldErrors<TFieldValues>);\n\n    _subjects.state.next({\n      errors: _formState.errors,\n      isValid: true,\n    });\n  };\n\n  const setError: UseFormSetError<TFieldValues> = (name, error, options) => {\n    const ref = ((get(_fields, name, { _f: {} }) as Field)._f || {}).ref;\n\n    set(_formState.errors, name, {\n      ...error,\n      ref,\n    });\n\n    _subjects.state.next({\n      name,\n      errors: _formState.errors,\n      isValid: false,\n    });\n\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n\n  const watch: UseFormWatch<TFieldValues> = (\n    name?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>\n      | WatchObserver<TFieldValues>,\n    defaultValue?: unknown,\n  ) =>\n    isFunction(name)\n      ? _subjects.watch.subscribe({\n          next: (info: any) =>\n            name(\n              _getWatch(\n                undefined,\n                defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n              ),\n              info,\n            ),\n        })\n      : _getWatch(\n          name as InternalFieldName | InternalFieldName[],\n          defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n          true,\n        );\n\n  const unregister: UseFormUnregister<TFieldValues> = (name, options = {}) => {\n    for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\n      _names.mount.delete(fieldName);\n      _names.array.delete(fieldName);\n\n      if (get(_fields, fieldName)) {\n        if (!options.keepValue) {\n          unset(_fields, fieldName);\n          unset(_formValues, fieldName);\n        }\n\n        !options.keepError && unset(_formState.errors, fieldName);\n        !options.keepDirty && unset(_formState.dirtyFields, fieldName);\n        !options.keepTouched && unset(_formState.touchedFields, fieldName);\n        !_options.shouldUnregister &&\n          !options.keepDefaultValue &&\n          unset(_defaultValues, fieldName);\n      }\n    }\n\n    _subjects.watch.next({});\n\n    _subjects.state.next({\n      ..._formState,\n      ...(!options.keepDirty ? {} : { isDirty: _getDirty() }),\n    });\n\n    !options.keepIsValid && _updateValid();\n  };\n\n  const register: UseFormRegister<TFieldValues> = (name, options = {}) => {\n    const field = get(_fields, name);\n\n    set(_fields, name, {\n      _f: {\n        ...(field && field._f ? field._f : { ref: { name } }),\n        name,\n        mount: true,\n        ...options,\n      },\n    });\n    _names.mount.add(name);\n\n    !isUndefined(options.value) &&\n      !options.disabled &&\n      set(_formValues, name, get(_formValues, name, options.value));\n\n    field\n      ? isBoolean(options.disabled) &&\n        set(\n          _formValues,\n          name,\n          options.disabled\n            ? undefined\n            : get(_formValues, name, getFieldValue(field._f)),\n        )\n      : updateValidAndValue(name, true);\n\n    return isWindowUndefined\n      ? ({ name: name as InternalFieldName } as UseFormRegisterReturn)\n      : {\n          name,\n          ...(isBoolean(options.disabled)\n            ? { disabled: options.disabled }\n            : {}),\n          onChange: handleChange,\n          onBlur: handleChange,\n          ref: (ref: HTMLInputElement | null): void => {\n            if (ref) {\n              register(name, options);\n              let field: Field = get(_fields, name);\n              const fieldRef = isUndefined(ref.value)\n                ? ref.querySelectorAll\n                  ? (ref.querySelectorAll('input,select,textarea')[0] as Ref) ||\n                    ref\n                  : ref\n                : ref;\n\n              const isRadioOrCheckbox = isRadioOrCheckboxFunction(fieldRef);\n\n              if (\n                fieldRef === field._f.ref ||\n                (isRadioOrCheckbox &&\n                  compact(field._f.refs || []).find(\n                    (option) => option === fieldRef,\n                  ))\n              ) {\n                return;\n              }\n\n              field = {\n                _f: isRadioOrCheckbox\n                  ? {\n                      ...field._f,\n                      refs: [\n                        ...compact(field._f.refs || []).filter(live),\n                        fieldRef,\n                      ],\n                      ref: { type: fieldRef.type, name },\n                    }\n                  : {\n                      ...field._f,\n                      ref: fieldRef,\n                    },\n              };\n\n              set(_fields, name, field);\n\n              (!options || !options.disabled) &&\n                updateValidAndValue(name, false, fieldRef);\n            } else {\n              const field: Field = get(_fields, name, {});\n              const shouldUnregister =\n                _options.shouldUnregister || options.shouldUnregister;\n\n              if (field._f) {\n                field._f.mount = false;\n              }\n\n              shouldUnregister &&\n                !(\n                  isNameInFieldArray(_names.array, name) && _stateFlags.action\n                ) &&\n                _names.unMount.add(name);\n            }\n          },\n        };\n  };\n\n  const handleSubmit: UseFormHandleSubmit<TFieldValues> =\n    (onValid, onInvalid) => async (e) => {\n      if (e) {\n        e.preventDefault && e.preventDefault();\n        e.persist && e.persist();\n      }\n      let hasNoPromiseError = true;\n      let fieldValues: any = _options.shouldUnregister\n        ? cloneObject(_formValues)\n        : { ..._formValues };\n\n      _subjects.state.next({\n        isSubmitting: true,\n      });\n\n      try {\n        if (_options.resolver) {\n          const { errors, values } = await _executeSchema();\n          _formState.errors = errors as FieldErrors<TFieldValues>;\n          fieldValues = values;\n        } else {\n          await executeBuildInValidation(_fields);\n        }\n\n        if (\n          isEmptyObject(_formState.errors) &&\n          Object.keys(_formState.errors).every((name) => get(fieldValues, name))\n        ) {\n          _subjects.state.next({\n            errors: {} as FieldErrors<TFieldValues>,\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          onInvalid && (await onInvalid(_formState.errors, e));\n          _options.shouldFocusError &&\n            focusFieldBy(\n              _fields,\n              (key) => get(_formState.errors, key),\n              _names.mount,\n            );\n        }\n      } catch (err) {\n        hasNoPromiseError = false;\n        throw err;\n      } finally {\n        _formState.isSubmitted = true;\n        _subjects.state.next({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful:\n            isEmptyObject(_formState.errors) && hasNoPromiseError,\n          submitCount: _formState.submitCount + 1,\n          errors: _formState.errors,\n        });\n      }\n    };\n\n  const resetField: UseFormResetField<TFieldValues> = (name, options = {}) => {\n    if (isUndefined(options.defaultValue)) {\n      setValue(name, get(_defaultValues, name));\n    } else {\n      setValue(name, options.defaultValue);\n      set(_defaultValues, name, options.defaultValue);\n    }\n\n    if (!options.keepTouched) {\n      unset(_formState.touchedFields, name);\n    }\n\n    if (!options.keepDirty) {\n      unset(_formState.dirtyFields, name);\n      _formState.isDirty = options.defaultValue\n        ? _getDirty(name, get(_defaultValues, name))\n        : _getDirty();\n    }\n\n    if (!options.keepError) {\n      unset(_formState.errors, name);\n      _proxyFormState.isValid && _updateValid();\n    }\n\n    _subjects.state.next({ ..._formState });\n  };\n\n  const reset: UseFormReset<TFieldValues> = (\n    formValues,\n    keepStateOptions = {},\n  ) => {\n    const updatedValues = formValues || _defaultValues;\n    const cloneUpdatedValues = cloneObject(updatedValues);\n    const values = !isEmptyObject(formValues)\n      ? cloneUpdatedValues\n      : _defaultValues;\n\n    if (!keepStateOptions.keepDefaultValues) {\n      _defaultValues = updatedValues;\n    }\n\n    if (!keepStateOptions.keepValues) {\n      if (isWeb) {\n        for (const name of _names.mount) {\n          const field = get(_fields, name);\n          if (field && field._f) {\n            const fieldReference = Array.isArray(field._f.refs)\n              ? field._f.refs[0]\n              : field._f.ref;\n\n            try {\n              isHTMLElement(fieldReference) &&\n                fieldReference.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n\n      _formValues = props.shouldUnregister\n        ? keepStateOptions.keepDefaultValues\n          ? cloneObject(_defaultValues)\n          : {}\n        : cloneUpdatedValues;\n      _fields = {};\n\n      _subjects.watch.next({\n        values,\n      });\n\n      _subjects.array.next({\n        values,\n      });\n    }\n\n    _names = {\n      mount: new Set(),\n      unMount: new Set(),\n      array: new Set(),\n      watch: new Set(),\n      watchAll: false,\n      focus: '',\n    };\n\n    _subjects.state.next({\n      submitCount: keepStateOptions.keepSubmitCount\n        ? _formState.submitCount\n        : 0,\n      isDirty: keepStateOptions.keepDirty\n        ? _formState.isDirty\n        : keepStateOptions.keepDefaultValues\n        ? !deepEqual(formValues, _defaultValues)\n        : false,\n      isSubmitted: keepStateOptions.keepIsSubmitted\n        ? _formState.isSubmitted\n        : false,\n      dirtyFields: keepStateOptions.keepDirty\n        ? _formState.dirtyFields\n        : ((keepStateOptions.keepDefaultValues && formValues\n            ? Object.entries(formValues).reduce(\n                (previous, [key, value]) => ({\n                  ...previous,\n                  [key]: value !== get(_defaultValues, key),\n                }),\n                {},\n              )\n            : {}) as FieldNamesMarkedBoolean<TFieldValues>),\n      touchedFields: keepStateOptions.keepTouched\n        ? _formState.touchedFields\n        : ({} as FieldNamesMarkedBoolean<TFieldValues>),\n      errors: keepStateOptions.keepErrors\n        ? _formState.errors\n        : ({} as FieldErrors<TFieldValues>),\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n\n    _stateFlags.mount =\n      !_proxyFormState.isValid || !!keepStateOptions.keepIsValid;\n    _stateFlags.watch = !!props.shouldUnregister;\n  };\n\n  const setFocus: UseFormSetFocus<TFieldValues> = (name) => {\n    const field = get(_fields, name)._f;\n    (field.ref.focus ? field.ref : field.refs[0]).focus();\n  };\n\n  return {\n    control: {\n      register,\n      unregister,\n      _executeSchema,\n      _getWatch,\n      _getDirty,\n      _updateValid,\n      _removeUnmounted,\n      _updateFieldArray,\n      _getFieldArray,\n      _subjects,\n      _proxyFormState,\n      get _fields() {\n        return _fields;\n      },\n      set _fields(value) {\n        _fields = value;\n      },\n      get _formValues() {\n        return _formValues;\n      },\n      set _formValues(value) {\n        _formValues = value;\n      },\n      get _stateFlags() {\n        return _stateFlags;\n      },\n      set _stateFlags(value) {\n        _stateFlags = value;\n      },\n      get _defaultValues() {\n        return _defaultValues;\n      },\n      set _defaultValues(value) {\n        _defaultValues = value;\n      },\n      get _names() {\n        return _names;\n      },\n      set _names(value) {\n        _names = value;\n      },\n      get _formState() {\n        return _formState;\n      },\n      set _formState(value) {\n        _formState = value;\n      },\n      get _options() {\n        return _options;\n      },\n      set _options(value) {\n        _options = {\n          ..._options,\n          ...value,\n        };\n      },\n    },\n    trigger,\n    register,\n    handleSubmit,\n    watch,\n    setValue,\n    getValues,\n    reset,\n    resetField,\n    clearErrors,\n    unregister,\n    setError,\n    setFocus,\n  };\n}\n","import * as React from 'react';\n\nimport { createFormControl } from './logic/createFormControl';\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport {\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldValues,\n  FormState,\n  UseFormProps,\n  UseFormReturn,\n} from './types';\nimport { useSubscribe } from './useSubscribe';\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): UseFormReturn<TFieldValues, TContext> {\n  const _formControl = React.useRef<\n    UseFormReturn<TFieldValues, TContext> | undefined\n  >();\n  const [formState, updateFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {} as FieldErrors<TFieldValues>,\n  });\n\n  if (_formControl.current) {\n    _formControl.current.control._options = props;\n  } else {\n    _formControl.current = {\n      ...createFormControl(props),\n      formState,\n    };\n  }\n\n  const control = _formControl.current.control;\n\n  useSubscribe({\n    subject: control._subjects.state,\n    callback: (value) => {\n      if (shouldRenderFormState(value, control._proxyFormState, true)) {\n        control._formState = {\n          ...control._formState,\n          ...value,\n        };\n\n        updateFormState({ ...control._formState });\n      }\n    },\n  });\n\n  React.useEffect(() => {\n    if (!control._stateFlags.mount) {\n      control._proxyFormState.isValid && control._updateValid();\n      control._stateFlags.mount = true;\n    }\n    if (control._stateFlags.watch) {\n      control._stateFlags.watch = false;\n      control._subjects.state.next({});\n    }\n    control._removeUnmounted();\n  });\n\n  _formControl.current.formState = getProxyFormState(\n    formState,\n    control._proxyFormState,\n  );\n\n  return _formControl.current;\n}\n"],"sourceRoot":""}